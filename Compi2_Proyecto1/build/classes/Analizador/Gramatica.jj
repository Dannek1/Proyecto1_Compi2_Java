/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Gramatica.jj */
/*@egen*/options
{
 CHOICE_AMBIGUITY_CHECK=4;
 STATIC=false;
 FORCE_LA_CHECK=false;
 IGNORE_CASE=true;

}
PARSER_BEGIN(Analizador)

package Analizador;


import java.io.*;


public class Analizador/*@bgen(jjtree)*/implements AnalizadorTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected JJTAnalizadorState jjtree = new JJTAnalizadorState();

/*@egen*/


}
PARSER_END(Analizador)

TOKEN:
{
	//Operadores aritmeticos
	  <SUMA : "+" >  //1
	| <RESTA:"-"> 	//2
	| <MULTI:"*"> 	//3
	| <DIV:"/"> 	//4
	| <POW: "^">	//5
	| <INCR: "++" > 	//6
	| <DECR: "--" > 	//7
	| <I_ASIG:"=">		//8
	
}

TOKEN:
{
	//Operadores Relacionales
	  <IGUAL:"=="> //9
	| <DISTINTO:"!="> //10
	| <MENOR:"<"> //11
	| <MAYOR:">"> //12
	| <MENOR_IGUAL:"<="> //13
	| <MAYOR_IGUAL:">="> //14
	
}

TOKEN:
{
	//Operadores Logicos
	  <OR:"||"> //15
	| <AND:"&&"> //16
	| <NOT:"!"> //17
	
}

TOKEN:
{
	//Contenedores
	  <PAR_IZ:"("> //18
	| <PAR_DER:")"> //19
	| <COR_IZ:"{"> //20
	| <COR_Der:"}"> //21
}

TOKEN:
{
	//Reservadas
	  <PUNTO_COMA:";"> //22
	| <COMA:","> //23  
	| <PUNTO:"."> //24
	| <R_USAR:"USAR"> //25
	| <R_CREAR:"CREAR"> //26
	| <R_BASE:"BASE_DATOS"> //27
	| <R_TABLA:"TABLA"> //28
	| <R_OBJETO:"OBJETO"> //29
	| <R_PROCEDIMIENTO:"PROCEDIMIENTO"> //30
	| <R_FUNCION:"FUNCION"> //31
	| <R_RETORNO:"RETORNO"> //32
	| <R_USUARIO:"USUARIO"> //33
	| <R_COLOCAR:"COLOCAR"> //34
	| <R_PAS:"password"> //35
	| <R_IMPRIMIR:"IMPRIMIR"> //36
	| <R_INSERTAR:"INSERTAR"> //37
	| <R_EN:"EN"> //38
	| <R_VALORES:"VALORES"> //39
	| <R_ACTUALIZAR:"ACTUALIZAR"> //40
	| <R_DONDE:"DONDE"> //41
	| <R_BORRAR:"BORRAR"> //42
	| <R_SELECCIONAR:"SELECCIONAR"> //43
	| <R_DE:"DE"> //44
	| <R_ORDENAR:"ORDENAR_POR"> //45
	| <R_ASC:"ASC"> //46
	| <R_DESC:"DESC"> //47
	| <R_OTORGAR:"OTORGAR"> //48
	| <R_PERMISOS:"PERMISOS"> //49
	| <R_DENEGAR:"DENEGAR"> //50
	| <R_BACKUP:"BACKUP"> //51
	| <R_USQLDUMP:"USQLDUMP"> //52
	| <R_COMPLETO:"COMPLETO"> //53
	| <R_RESTAURAR:"RESTAURAR"> //54
	| <R_ALTERAR:"ALTERAR"> //55
	| <R_AGREGAR:"AGREGAR"> //56
	| <R_QUITAR:"QUITAR"> //57
	| <R_CAMBIAR:"CAMBIAR"> //58
	| <R_ELIMINAR:"ELIMINAR"> //59
	| <R_DECLARAR:"DECLARAR"> //60
	| <R_SI:"SI"> //61
	| <R_SINO:"SINO"> //62
	| <R_SELECCIONA:"SELECCIONA"> //63
	| <R_CASO:"CASO"> //64
	| <R_DEFECTO:"DEFECTO"> //65
	| <R_PARA:"PARA"> //66
	| <R_MIENTRAS:"MIENTRAS"> //67
	| <R_DETENER:"DETENER"> //68
	| <R_FECHA:"FECHA"> //69
	| <R_FECHA_HORA:"FECHA_HORA"> //70
	| <R_CONTAR:"CONTAR"> //71
	
	//tipos de Datos
	| <R_TEXT:"TEXT"> //72
	| <R_INTEGER:"INTEGER"> //73
	| <R_DOUBLE:"DOUBLE"> //74
	| <R_BOOL:"BOOL"> //75
	| <R_DATE:"DATE"> //76
	| <R_DATETIME:"DATETIME"> //77
	
	//Atributos de campos de tablas
    | <R_NO:"No"> //78
	| <R_NULO:"Nulo"> //79  
	| <R_AUTOINCREMENTABLE:"Autoincrementable"> //80
	| <R_PK:"Llave_Primaria"> //81
	| <R_FK:"Llave_Foranea"> //82
	| <R_UNICO:"Unico"> //83

	//COMILLAS
	| <R_COMILLAS:"\""> //84

        
}

TOKEN:
{	
	//Expresiones Regulares
	
	  <ID : ["a"-"z","A"-"Z","@"](["a"-"z","A"-"Z","0"-"9","_"])*>  //85
	| <ENTERO : (["0"-"9"])+>  //86
	| <DECIMAL : (["0"-"9"])+["."](["0"-"9"])+ > //87
	| <CADENA:  "\""(~["\""])+"\"">//88
	| <FECHA:  (["1"-"3"])*["0"-"9"]["-"]["0"-"1"]["0"-"9"]["-"]["1"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]>	//89
	| <FECHA_HORA:  <FECHA>[" "](["0"-"2"])*["0"-"9"][":"]["0"-"5"]["0"-"9"][":"]["0"-"5"]["0"-"9"]>	//90
	
	| <DOS_PUNTO:":"> //91
	| <BOOLEAN:"verdadero"|"falso"> //92
	
    
}
SKIP : 
{ 
	 " "
        |"\n" 
        | "\r\n"
        |"\r" 
        | "\t"
        | "\f"
        |<"#"(~["\n"])+>
        |<"#"<MULTI>["a"-"z","A"-"Z","0"-"9"," "](["a"-"z","A"-"Z","0"-"9"," ",":",";",".","@","\n","\r","\t","\f"])*<MULTI>"#">
}

SimpleNode Programa()          :
{/*@bgen(jjtree) PROGRAMA */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PROGRAMA */
        try {
/*@egen*/
	inicio()<EOF>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void inicio():
{/*@bgen(jjtree) inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) inicio */
        try {
/*@egen*/
	sentencias()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void sentencias():
{/*@bgen(jjtree) sentencias */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) sentencias */
        try {
/*@egen*/
	sentencia()(LOOKAHEAD(2)sentencias())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void sentencia():
{/*@bgen(jjtree) sentencia */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) sentencia */
         try {
/*@egen*/
	 Usar()
	|crear()
	|Imprimir()
	|Insertar()
	|Actualizar()
	|Borrar()
	|Seleccionar()
	|Otorgar()
	|Denegar()
	|back()
	|restaurar()
	|Alterar()
	|Eliminar()
	|Declarar()
	|Contar()
	|Procedimiento()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/

        
}

void Usar():
{/*@bgen(jjtree) Usar */
  SimpleNode jjtn000 = new SimpleNode(JJTUSAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Usar */
        try {
/*@egen*/
	r_usar()r_id()r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        

}

void r_usar()     :
{/*@bgen(jjtree) USAR */
        SimpleNode jjtn000 = new SimpleNode(JJTUSAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) USAR */
        try {
/*@egen*/
	t=<R_USAR>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_id()   :
{/*@bgen(jjtree) ID */
        SimpleNode jjtn000 = new SimpleNode(JJTID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) ID */
        try {
/*@egen*/
	t=<ID>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_punto_coma()           :
{/*@bgen(jjtree) PUNTO_COMA */
        SimpleNode jjtn000 = new SimpleNode(JJTPUNTO_COMA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) PUNTO_COMA */
        try {
/*@egen*/
	t=<PUNTO_COMA>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void crear():
{/*@bgen(jjtree) crear */
  SimpleNode jjtn000 = new SimpleNode(JJTCREAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) crear */
        try {
/*@egen*/
	r_crear()Opciones_Crear()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_crear()      :
{/*@bgen(jjtree) CREAR */
        SimpleNode jjtn000 = new SimpleNode(JJTCREAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) CREAR */
        try {
/*@egen*/
	t=<R_CREAR>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Opciones_Crear():
{/*@bgen(jjtree) Opciones_Crear */
  SimpleNode jjtn000 = new SimpleNode(JJTOPCIONES_CREAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Opciones_Crear */
         try {
/*@egen*/       
	 C_Base()
	|C_Tabla()
	|C_Objeto()
	|C_Pro()
	|C_Funcion()
	|C_Usuario()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void C_Base():
{/*@bgen(jjtree) C_Base */
  SimpleNode jjtn000 = new SimpleNode(JJTC_BASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) C_Base */
        try {
/*@egen*/
	<R_BASE>r_id()r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void C_Tabla():
{/*@bgen(jjtree) C_Tabla */
  SimpleNode jjtn000 = new SimpleNode(JJTC_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) C_Tabla */
        try {
/*@egen*/
	<R_TABLA>r_id()<PAR_IZ>Campos_Tabla()<PAR_DER>r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void Campos_Tabla():
{/*@bgen(jjtree) Campos_Tabla */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPOS_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Campos_Tabla */
        try {
/*@egen*/
	Campo_Tabla()(Campos_Tabla_prima())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void Campos_Tabla_prima():
{/*@bgen(jjtree) Campos_Tabla_prima */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPOS_TABLA_PRIMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Campos_Tabla_prima */
        try {
/*@egen*/
	<COMA>Campo_Tabla()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
      
}

void Campo_Tabla():
{/*@bgen(jjtree) Campo_Tabla */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPO_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Campo_Tabla */
         try {
/*@egen*/
	 Tipo_Dato()r_id()(Complemento())*/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Complemento()            :
{/*@bgen(jjtree) COMPLEMENTO */
        SimpleNode jjtn000 = new SimpleNode(JJTCOMPLEMENTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) COMPLEMENTO */
         try {
/*@egen*/
	 t=<R_NO>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_NULO>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_AUTOINCREMENTABLE>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_PK>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_FK>r_id()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.setName(t.image+" "+((SimpleNode) jjtn000.children[0]).name);}
	|t=<R_UNICO>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
        
            
}

void C_Objeto():
{/*@bgen(jjtree) C_Objeto */
  SimpleNode jjtn000 = new SimpleNode(JJTC_OBJETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) C_Objeto */
        try {
/*@egen*/
	<R_OBJETO>r_id()<PAR_IZ>(Parametros())*<PAR_DER>r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void Parametros():
{/*@bgen(jjtree) Parametros */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parametros */
        try {
/*@egen*/
	Parametro()(<COMA>Parametro())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Parametro():
{/*@bgen(jjtree) Parametro */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Parametro */
        try {
/*@egen*/
	Tipo_Dato()r_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void C_Pro():
{/*@bgen(jjtree) C_Pro */
  SimpleNode jjtn000 = new SimpleNode(JJTC_PRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) C_Pro */
        try {
/*@egen*/
	<R_PROCEDIMIENTO>r_id()<PAR_IZ>(Parametros())*<PAR_DER><COR_IZ>SubSentencias()<COR_Der>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}



void SubSentencia():
{/*@bgen(jjtree) SubSentencia */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBSENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SubSentencia */
         try {
/*@egen*/
	 LOOKAHEAD(3)Asignacion()
	|IF()
	|Switch()
	|For()
	|While()
	|LOOKAHEAD(3)Fecha()
	|LOOKAHEAD(2)Fecha_Hora()
	|sentencia()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void C_Funcion():
{/*@bgen(jjtree) C_Funcion */
  SimpleNode jjtn000 = new SimpleNode(JJTC_FUNCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) C_Funcion */
        try {
/*@egen*/
	<R_FUNCION>r_id()<PAR_IZ>(Parametros())*<PAR_DER>Tipo_Dato()<COR_IZ>Sentencias_Retorno()<COR_Der>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
    
}

void Sentencias_Retorno():
{/*@bgen(jjtree) Sentencias_Retorno */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAS_RETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sentencias_Retorno */
        try {
/*@egen*/
	(SubSentencia())+Retorno()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void Retorno():
{/*@bgen(jjtree) Retorno */
  SimpleNode jjtn000 = new SimpleNode(JJTRETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Retorno */
        try {
/*@egen*/
	<R_RETORNO>aritmetica()r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void  C_Usuario():
{/*@bgen(jjtree) C_Usuario */
  SimpleNode jjtn000 = new SimpleNode(JJTC_USUARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) C_Usuario */
        try {
/*@egen*/
	<R_USUARIO>r_id()<R_COLOCAR><R_PAS><I_ASIG>Expresion()r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Imprimir():
{/*@bgen(jjtree) Imprimir */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Imprimir */
        try {
/*@egen*/
	<R_IMPRIMIR><PAR_IZ>Expresion()<PAR_DER>r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void Insertar():
{/*@bgen(jjtree) Insertar */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Insertar */
        try {
/*@egen*/	
	<R_INSERTAR><R_EN><R_TABLA>r_id()<PAR_IZ>tipo_insercion()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void tipo_insercion():
{/*@bgen(jjtree) tipo_insercion */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_INSERCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipo_insercion */
         try {
/*@egen*/
	 LOOKAHEAD(5)campos()<PAR_DER><R_VALORES><PAR_IZ>Valor()<PAR_DER>r_punto_coma()
	|LOOKAHEAD(5)Valor()<PAR_DER>r_punto_coma()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/

}

void campos():
{/*@bgen(jjtree) campos */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) campos */
         try {
/*@egen*/
	 LOOKAHEAD(2)campo()<COMA>campos()
	|LOOKAHEAD(2)campo()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void campo():
{/*@bgen(jjtree) campo */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) campo */
        try {
/*@egen*/
	r_id()
	|r_usuario()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Valor():
{/*@bgen(jjtree) Valor */
  SimpleNode jjtn000 = new SimpleNode(JJTVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Valor */
        try {
/*@egen*/
	aritmetica()(LOOKAHEAD(2)<COMA> Valor())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Actualizar():
{/*@bgen(jjtree) Actualizar */
  SimpleNode jjtn000 = new SimpleNode(JJTACTUALIZAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Actualizar */
        try {
/*@egen*/
	<R_ACTUALIZAR><R_TABLA>r_id()<PAR_IZ>campos()<PAR_DER><R_VALORES><PAR_IZ>Valor()<PAR_DER>(Condicionar())?r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void Condicionar():
{/*@bgen(jjtree) Condicionar */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Condicionar */
         try {
/*@egen*/
	 <R_DONDE> logica_Conusltas()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
	
}

void Borrar():
{/*@bgen(jjtree) Borrar */
  SimpleNode jjtn000 = new SimpleNode(JJTBORRAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Borrar */
        try {
/*@egen*/
	<R_BORRAR><R_EN><R_TABLA>r_id() Condicionar()r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Seleccionar():
{/*@bgen(jjtree) Seleccionar */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECCIONAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Seleccionar */
        try {
/*@egen*/
	<R_SELECCIONAR> Campos_Seleccion() <R_DE> r_id() (Condicionar())? (Ordenamiento())? r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void Campos_Seleccion():
{/*@bgen(jjtree) Campos_Seleccion */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPOS_SELECCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Campos_Seleccion */
         try {
/*@egen*/
	 <MULTI>
	|campos()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Ordenamiento():
{/*@bgen(jjtree) Ordenamiento */
  SimpleNode jjtn000 = new SimpleNode(JJTORDENAMIENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Ordenamiento */
         try {
/*@egen*/
	 <R_ORDENAR>r_id()Modo_Orden()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Modo_Orden():
{/*@bgen(jjtree) Modo_Orden */
  SimpleNode jjtn000 = new SimpleNode(JJTMODO_ORDEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Modo_Orden */
         try {
/*@egen*/
	 r_asc()
	|r_desc()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/	
}

void Otorgar():
{/*@bgen(jjtree) Otorgar */
  SimpleNode jjtn000 = new SimpleNode(JJTOTORGAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Otorgar */
        try {
/*@egen*/
	<R_OTORGAR><R_PERMISOS>r_id()<COMA>r_id()<PUNTO>Objeto() r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Objeto():
{/*@bgen(jjtree) Objeto */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Objeto */
         try {
/*@egen*/
	 <MULTI>
	|r_id()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Denegar():
{/*@bgen(jjtree) Denegar */
  SimpleNode jjtn000 = new SimpleNode(JJTDENEGAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Denegar */
        try {
/*@egen*/
	<R_DENEGAR><R_PERMISOS>r_id()<COMA>r_id()<PUNTO>Objeto() r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void back():
{/*@bgen(jjtree) back */
  SimpleNode jjtn000 = new SimpleNode(JJTBACK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) back */
        try {
/*@egen*/
	<R_BACKUP>tipo_back()r_id() r_id()(<PUNTO>r_id())?r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void tipo_back():
{/*@bgen(jjtree) tipo_back */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_BACK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipo_back */
         try {
/*@egen*/
	 r_umsql()
	|r_completo()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void restaurar():
{/*@bgen(jjtree) restaurar */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTAURAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) restaurar */
        try {
/*@egen*/
	<R_RESTAURAR>tipo_back() aritmetica() r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Alterar():
{/*@bgen(jjtree) Alterar */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Alterar */
        try {
/*@egen*/
	<R_ALTERAR> alterado()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
}

void alterado():
{/*@bgen(jjtree) alterado */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) alterado */
         try {
/*@egen*/
	 r_tabla() r_id() accion_alterado_tabla()r_punto_coma()
	|r_objeto() r_id() accion_alterado_objeto()r_punto_coma()
	|r_usario() r_id() <R_CAMBIAR> <R_PAS> <I_ASIG>Expresion()r_punto_coma()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
        
}

void accion_alterado_tabla():
{/*@bgen(jjtree) accion_alterado_tabla */
  SimpleNode jjtn000 = new SimpleNode(JJTACCION_ALTERADO_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) accion_alterado_tabla */
         try {
/*@egen*/
	 r_agregar()<PAR_IZ>Campos_Tabla()<PAR_DER>
	|r_quitar()campos()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void accion_alterado_objeto():
{/*@bgen(jjtree) accion_alterado_objeto */
  SimpleNode jjtn000 = new SimpleNode(JJTACCION_ALTERADO_OBJETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) accion_alterado_objeto */
        try {
/*@egen*/
	r_agregar()<PAR_IZ>Parametros()<PAR_DER>
	|r_quitar()campos()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Eliminar():
{/*@bgen(jjtree) Eliminar */
  SimpleNode jjtn000 = new SimpleNode(JJTELIMINAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Eliminar */
        try {
/*@egen*/
	<R_ELIMINAR>objetos_eliminar()r_id()r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void objetos_eliminar():
{/*@bgen(jjtree) objetos_eliminar */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJETOS_ELIMINAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) objetos_eliminar */
         try {
/*@egen*/
	 r_tabla()
	|r_base()
	|r_objeto()
	|r_usario()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Declarar():
{/*@bgen(jjtree) Declarar */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Declarar */
        try {
/*@egen*/
	<R_DECLARAR> lista_variables() Tipo_Dato()(<I_ASIG> asignacion_declaracion())? r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void lista_variables():
{/*@bgen(jjtree) lista_variables */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_VARIABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) lista_variables */
         try {
/*@egen*/
	 LOOKAHEAD(2)variable()<COMA>lista_variables()
	|LOOKAHEAD(2)variable()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void variable():
{/*@bgen(jjtree) variable */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) variable */
        try {
/*@egen*/
	r_id()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void asignacion_declaracion():
{/*@bgen(jjtree) asignacion_declaracion */
  SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION_DECLARACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) asignacion_declaracion */
        try {
/*@egen*/
		  
        aritmetica()(r_parI()(Valor())?r_parD())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void Asignacion():
{/*@bgen(jjtree) Asignacion */
  SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Asignacion */
        try {
/*@egen*/
	r_id()<I_ASIG>aritmetica()r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void IF():
{/*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) IF */
        try {
/*@egen*/
	<R_SI> <PAR_IZ>logica()<PAR_DER><COR_IZ>SubSentencias()<COR_Der>(sino_else())?/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void sino_else():
{/*@bgen(jjtree) sino_else */
  SimpleNode jjtn000 = new SimpleNode(JJTSINO_ELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) sino_else */
         try {
/*@egen*/
	 <R_SINO><COR_IZ>SubSentencias()<COR_Der>/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
         

}

void Switch():
{/*@bgen(jjtree) Switch */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Switch */
        try {
/*@egen*/
	<R_SELECCIONA><PAR_IZ>aritmetica()<PAR_DER><COR_IZ> casos() (defecto())?<COR_Der>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void casos():
{/*@bgen(jjtree) casos */
  SimpleNode jjtn000 = new SimpleNode(JJTCASOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) casos */
                try {
/*@egen*/
		caso()(casos())?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/
}

void caso():
{/*@bgen(jjtree) caso */
  SimpleNode jjtn000 = new SimpleNode(JJTCASO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) caso */
        try {
/*@egen*/
	<R_CASO> Expresion() <DOS_PUNTO>Sentencias_swithc()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Sentencias_swithc():
{/*@bgen(jjtree) Sentencias_swithc */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAS_SWITHC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Sentencias_swithc */
         try {
/*@egen*/
	 SubSentencia()(Sentencias_swithc())?
	|r_detener() r_punto_coma()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void defecto():
{/*@bgen(jjtree) defecto */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFECTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) defecto */
         try {
/*@egen*/
	 <R_DEFECTO> <DOS_PUNTO>Sentencias_swithc()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
	
}

void For():
{/*@bgen(jjtree) For */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) For */
        try {
/*@egen*/
	<R_PARA><PAR_IZ>declaracion_for()r_punto_coma()logica()r_punto_coma()operador_for()<PAR_DER><COR_IZ>Sentencias_swithc()<COR_Der>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void declaracion_for():
{/*@bgen(jjtree) declaracion_for */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaracion_for */
        try {
/*@egen*/
	<R_DECLARAR>r_id() <R_INTEGER> <I_ASIG> aritmetica()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void operador_for():
{/*@bgen(jjtree) operador_for */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operador_for */
         try {
/*@egen*/
	 r_incr()
	|r_decr()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void While():
{/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
        try {
/*@egen*/
	<R_MIENTRAS><PAR_IZ>logica()<PAR_DER><COR_IZ>Sentencias_swithc()<COR_Der>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void Fecha():
{/*@bgen(jjtree) Fecha */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Fecha */
        try {
/*@egen*/
	r_id()<I_ASIG><R_FECHA><PAR_IZ><PAR_DER>r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void Fecha_Hora():
{/*@bgen(jjtree) Fecha_Hora */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHA_HORA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Fecha_Hora */
        try {
/*@egen*/
	r_id()<I_ASIG><R_FECHA_HORA><PAR_IZ><PAR_DER>r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void Contar():
{/*@bgen(jjtree) Contar */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Contar */
        try {
/*@egen*/
	<R_CONTAR><PAR_IZ><MENOR><MENOR>Seleccionar()<MAYOR><MAYOR><PAR_DER>r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
        
}

void Tipo_Dato()          :
{/*@bgen(jjtree) TIPO_DATO */
        SimpleNode jjtn000 = new SimpleNode(JJTTIPO_DATO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) TIPO_DATO */
         try {
/*@egen*/
	 t=<R_TEXT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_INTEGER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_DOUBLE>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_BOOL>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_DATE>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_DATETIME>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
	
}

//operaciones logicas
void logica():
{/*@bgen(jjtree) logica */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) logica */
        try {
/*@egen*/
	log_or()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



void log_or():
{/*@bgen(jjtree) log_or */
  SimpleNode jjtn000 = new SimpleNode(JJTLOG_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) log_or */
         try {
/*@egen*/
	 LOOKAHEAD(5)log_and()r_or()log_and()
	|LOOKAHEAD(5)log_and()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void log_and():
{/*@bgen(jjtree) log_and */
  SimpleNode jjtn000 = new SimpleNode(JJTLOG_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) log_and */
         try {
/*@egen*/
	 LOOKAHEAD(5)relacional()r_and()logica()
	| r_not()logica()
	| LOOKAHEAD(5)relacional()
	|r_par_iz()logica()r_par_der()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

//operaicones relacionales
void relacional():
{/*@bgen(jjtree) relacional */
  SimpleNode jjtn000 = new SimpleNode(JJTRELACIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) relacional */
         try {
/*@egen*/
	 sub_relacional()(relacional_prima())*/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
	
}

void relacional_prima():
{/*@bgen(jjtree) relacional_prima */
  SimpleNode jjtn000 = new SimpleNode(JJTRELACIONAL_PRIMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) relacional_prima */
        try {
/*@egen*/
	
	r_igual()sub_relacional() (LOOKAHEAD(2)relacional_prima())*
	|r_distinto()sub_relacional()(LOOKAHEAD(2)relacional_prima())*
	|r_menor()sub_relacional()(LOOKAHEAD(2)relacional_prima())*
	|r_mayor()sub_relacional()(LOOKAHEAD(2)relacional_prima())*
	|r_menor_igual()sub_relacional()(LOOKAHEAD(2)relacional_prima())*
	|r_mayor_igual()sub_relacional()(LOOKAHEAD(2)relacional_prima())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void sub_relacional():
{/*@bgen(jjtree) sub_relacional */
  SimpleNode jjtn000 = new SimpleNode(JJTSUB_RELACIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) sub_relacional */
         try {
/*@egen*/
	 LOOKAHEAD(5)aritmetica()
	|LOOKAHEAD(5)r_par_iz()relacional()r_par_der()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

//operaciones arimeticas
void aritmetica():
{/*@bgen(jjtree) aritmetica */
  SimpleNode jjtn000 = new SimpleNode(JJTARITMETICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) aritmetica */
        try {
/*@egen*/
	multi_div() (LOOKAHEAD(2)aritmetica_prima())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void aritmetica_prima():
{/*@bgen(jjtree) aritmetica_prima */
  SimpleNode jjtn000 = new SimpleNode(JJTARITMETICA_PRIMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) aritmetica_prima */
          try {
/*@egen*/	
	  r_suma()multi_div()(LOOKAHEAD(2)aritmetica_prima())*
	 |menos()multi_div()(LOOKAHEAD(2)aritmetica_prima())*/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/
}

void multi_div():
{/*@bgen(jjtree) multi_div */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTI_DIV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) multi_div */
        try {
/*@egen*/
	 
	potenciar() (multi_div_prima())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void multi_div_prima():
{/*@bgen(jjtree) multi_div_prima */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTI_DIV_PRIMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) multi_div_prima */
         try {
/*@egen*/
	 r_multi()potenciar() (LOOKAHEAD(2)multi_div_prima())*
	|r_div()potenciar() (LOOKAHEAD(2)multi_div_prima())*/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void potenciar():
{/*@bgen(jjtree) potenciar */
  SimpleNode jjtn000 = new SimpleNode(JJTPOTENCIAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) potenciar */
        try {
/*@egen*/
	
	unario()(potenciar_prima())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void potenciar_prima():
{/*@bgen(jjtree) potenciar_prima */
  SimpleNode jjtn000 = new SimpleNode(JJTPOTENCIAR_PRIMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) potenciar_prima */
         try {
/*@egen*/
	 r_pow()unario()(LOOKAHEAD(2)potenciar_prima())*/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void unario():
{/*@bgen(jjtree) unario */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) unario */
         try {
/*@egen*/
	 menos()Expresion()
	|Expresion()
	|r_par_iz()aritmetica()r_par_der()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
}

void Expresion():
{/*@bgen(jjtree) Expresion */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expresion */
         try {
/*@egen*/
	 r_id()
	|r_entero()
        |r_decimal()
        |r_cadena()
        |r_fecha()
        |r_fecha_hora()
		|r_booleano()/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/

}

void menos()      :
{/*@bgen(jjtree) Menos */
        SimpleNode jjtn000 = new SimpleNode(JJTMENOS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Menos */
        try {
/*@egen*/
	t=<RESTA>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_entero()       :
{/*@bgen(jjtree) Entero */
        SimpleNode jjtn000 = new SimpleNode(JJTENTERO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) Entero */
        try {
/*@egen*/
	t=<ENTERO>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_decimal()        :
{/*@bgen(jjtree) DECIMAL */
        SimpleNode jjtn000 = new SimpleNode(JJTDECIMAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) DECIMAL */
        try {
/*@egen*/
	t=<DECIMAL>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_cadena()       :
{/*@bgen(jjtree) CADENA */
        SimpleNode jjtn000 = new SimpleNode(JJTCADENA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) CADENA */
        try {
/*@egen*/
	t=<CADENA>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_fecha()      :
{/*@bgen(jjtree) FECHA */
        SimpleNode jjtn000 = new SimpleNode(JJTFECHA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) FECHA */
        try {
/*@egen*/
	t=<FECHA>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_fecha_hora()           :
{/*@bgen(jjtree) FECHA_HORA */
        SimpleNode jjtn000 = new SimpleNode(JJTFECHA_HORA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) FECHA_HORA */
        try {
/*@egen*/
	t=<FECHA_HORA>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Procedimiento():
{/*@bgen(jjtree) Procedimiento */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDIMIENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Procedimiento */
        try {
/*@egen*/
	r_id()<PAR_IZ>(Parametros())*<PAR_DER>r_punto_coma()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void SubSentencias():
{/*@bgen(jjtree) SubSentencias */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBSENTENCIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) SubSentencias */
        try {
/*@egen*/
	(SubSentencia())+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_not()    :
{/*@bgen(jjtree) NOT */
        SimpleNode jjtn000 = new SimpleNode(JJTNOT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) NOT */
        try {
/*@egen*/
	t=<NOT>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_and()    :
{/*@bgen(jjtree) AND */
        SimpleNode jjtn000 = new SimpleNode(JJTAND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) AND */
        try {
/*@egen*/
	t=<AND>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_or()   :
{/*@bgen(jjtree) OR */
        SimpleNode jjtn000 = new SimpleNode(JJTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) OR */
        try {
/*@egen*/
	t=<OR>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_par_iz()       :
{/*@bgen(jjtree) PAR_IZ */
        SimpleNode jjtn000 = new SimpleNode(JJTPAR_IZ);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) PAR_IZ */
        try {
/*@egen*/
	t=<PAR_IZ>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_par_der()        :
{/*@bgen(jjtree) PAR_DER */
        SimpleNode jjtn000 = new SimpleNode(JJTPAR_DER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) PAR_DER */
        try {
/*@egen*/
	t=<PAR_DER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_igual()      :
{/*@bgen(jjtree) IGUAL */
        SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) IGUAL */
        try {
/*@egen*/
	t=<IGUAL>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_distinto()         :
{/*@bgen(jjtree) DISTINTO */
        SimpleNode jjtn000 = new SimpleNode(JJTDISTINTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) DISTINTO */
        try {
/*@egen*/
	t=<DISTINTO>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_menor()      :
{/*@bgen(jjtree) MENOR */
        SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) MENOR */
        try {
/*@egen*/
	t=<MENOR>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_mayor()      :
{/*@bgen(jjtree) MAYOR */
        SimpleNode jjtn000 = new SimpleNode(JJTMAYOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) MAYOR */
        try {
/*@egen*/
	t=<MAYOR>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void r_menor_igual()            :
{/*@bgen(jjtree) MENOR_IGUAL */
        SimpleNode jjtn000 = new SimpleNode(JJTMENOR_IGUAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) MENOR_IGUAL */
        try {
/*@egen*/
	t=<MENOR_IGUAL>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_mayor_igual()            :
{/*@bgen(jjtree) MAYOR_IGUAL */
        SimpleNode jjtn000 = new SimpleNode(JJTMAYOR_IGUAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) MAYOR_IGUAL */
        try {
/*@egen*/
	t=<MAYOR_IGUAL>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_suma()     :
{/*@bgen(jjtree) SUMA */
        SimpleNode jjtn000 = new SimpleNode(JJTSUMA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) SUMA */
        try {
/*@egen*/
	t=<SUMA>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_multi()      :
{/*@bgen(jjtree) MULTI */
        SimpleNode jjtn000 = new SimpleNode(JJTMULTI);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) MULTI */
        try {
/*@egen*/
	t=<MULTI>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_div()    :
{/*@bgen(jjtree) DIV */
        SimpleNode jjtn000 = new SimpleNode(JJTDIV);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) DIV */
        try {
/*@egen*/
	t=<DIV>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_pow()    :
{/*@bgen(jjtree) POW */
        SimpleNode jjtn000 = new SimpleNode(JJTPOW);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) POW */
        try {
/*@egen*/
	t=<POW>/*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
               }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_booleano()        :
{/*@bgen(jjtree) BOOLEAN */
        SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) BOOLEAN */
        try {
/*@egen*/
	t=<BOOLEAN>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void logica_Conusltas():
{/*@bgen(jjtree) logica_Conusltas */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICA_CONUSLTAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) logica_Conusltas */
   try {
/*@egen*/
   aritmetica() operador_consulta() aritmetica() (logica_Conusltas2())*
   |<R_USUARIO> operador_consulta() aritmetica() (logica_Conusltas2())*/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
    
}

void operador_consulta():
{/*@bgen(jjtree) operador_consulta */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR_CONSULTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operador_consulta */
        try {
/*@egen*/
	r_igual()
	|r_mayor()
	|r_menor()
	|r_mayor_igual()
	|r_menor_igual()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void operador_consulta2():
{/*@bgen(jjtree) operador_consulta2 */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR_CONSULTA2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operador_consulta2 */
        try {
/*@egen*/
	r_and()
	|r_or()
	|r_distinto()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void logica_Conusltas2():
{/*@bgen(jjtree) logica_Conusltas2 */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICA_CONUSLTAS2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) logica_Conusltas2 */
  try {
/*@egen*/
  LOOKAHEAD(2)operador_consulta2() aritmetica() operador_consulta() aritmetica()
  |LOOKAHEAD(2)operador_consulta2() <R_PAS> operador_consulta() aritmetica()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void r_asc()    :
{/*@bgen(jjtree) ASC */
        SimpleNode jjtn000 = new SimpleNode(JJTASC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) ASC */
        try {
/*@egen*/
	t=<R_ASC>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void r_desc()     :
{/*@bgen(jjtree) DESC */
        SimpleNode jjtn000 = new SimpleNode(JJTDESC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) DESC */
        try {
/*@egen*/
	t=<R_DESC>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_umsql()         :
{/*@bgen(jjtree) USQLDUMP */
        SimpleNode jjtn000 = new SimpleNode(JJTUSQLDUMP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) USQLDUMP */
        try {
/*@egen*/
	t=<R_USQLDUMP>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void r_completo()         :
{/*@bgen(jjtree) COMPLETO */
        SimpleNode jjtn000 = new SimpleNode(JJTCOMPLETO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) COMPLETO */
        try {
/*@egen*/
	t=<R_COMPLETO>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_tabla()      :
{/*@bgen(jjtree) TABLA */
        SimpleNode jjtn000 = new SimpleNode(JJTTABLA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) TABLA */
        try {
/*@egen*/
	t=<R_TABLA>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_objeto()       :
{/*@bgen(jjtree) OBJETO */
        SimpleNode jjtn000 = new SimpleNode(JJTOBJETO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) OBJETO */
        try {
/*@egen*/
	t=<R_OBJETO>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_usario()        :
{/*@bgen(jjtree) USUARIO */
        SimpleNode jjtn000 = new SimpleNode(JJTUSUARIO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) USUARIO */
        try {
/*@egen*/
	t=<R_USUARIO>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_incr()     :
{/*@bgen(jjtree) INCR */
        SimpleNode jjtn000 = new SimpleNode(JJTINCR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) INCR */
        try {
/*@egen*/
	t=<INCR>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_decr()     :
{/*@bgen(jjtree) DECR */
        SimpleNode jjtn000 = new SimpleNode(JJTDECR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) DECR */
        try {
/*@egen*/
	t=<DECR>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_detener()        :
{/*@bgen(jjtree) DETENER */
        SimpleNode jjtn000 = new SimpleNode(JJTDETENER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) DETENER */
        try {
/*@egen*/
	t=<R_DETENER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_usuario()        :
{/*@bgen(jjtree) USUARIO */
        SimpleNode jjtn000 = new SimpleNode(JJTUSUARIO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) USUARIO */
        try {
/*@egen*/
	t=<R_USUARIO>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_base()           :
{/*@bgen(jjtree) BASE_DATOS */
        SimpleNode jjtn000 = new SimpleNode(JJTBASE_DATOS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) BASE_DATOS */
        try {
/*@egen*/
	t=<R_BASE>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_agregar()        :
{/*@bgen(jjtree) AGREGAR */
        SimpleNode jjtn000 = new SimpleNode(JJTAGREGAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/	
	Token t;
}
{/*@bgen(jjtree) AGREGAR */
        try {
/*@egen*/
	t=<R_AGREGAR>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_quitar()       :
{/*@bgen(jjtree) QUITAR */
        SimpleNode jjtn000 = new SimpleNode(JJTQUITAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) QUITAR */
        try {
/*@egen*/
	t=<R_QUITAR>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_parI()       :
{/*@bgen(jjtree) PAR_IZ */
        SimpleNode jjtn000 = new SimpleNode(JJTPAR_IZ);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) PAR_IZ */
        try {
/*@egen*/
	t=<PAR_IZ>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_parD()        :
{/*@bgen(jjtree) PAR_DER */
        SimpleNode jjtn000 = new SimpleNode(JJTPAR_DER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) PAR_DER */
        try {
/*@egen*/
	t=<PAR_DER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}



JAVACODE 
void error_skipto(int kind) {/*@bgen(jjtree) error_skipto */
SimpleNode jjtn000 = new SimpleNode(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/ 
ParseException e = generateParseException(); // se genera el objeto excepci\u00c3\u00b3n
System.out.println(e.toString()); // se imprime el mensaje de error
Token t; 
do {
t = getNextToken();
} while (t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}