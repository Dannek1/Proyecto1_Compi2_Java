/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Gramatica.jj */
/*@egen*/options
{
 CHOICE_AMBIGUITY_CHECK=4;
 STATIC=false;
 FORCE_LA_CHECK=false;
 IGNORE_CASE=true;

}

PARSER_BEGIN(Analizador_Paquetes)

package Analizador_Paquetes;


import java.io.*;


public class Analizador_Paquetes/*@bgen(jjtree)*/implements Analizador_PaquetesTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected JJTAnalizador_PaquetesState jjtree = new JJTAnalizador_PaquetesState();

/*@egen*/


}
PARSER_END(Analizador_Paquetes)

TOKEN:
{
	 <ABRIR:"[">
	|<CERRAR:"]">
	|<R_VALIDAR:"\"validar\"">
	|<R_LOGIN:"\"login\"">
	|<R_COMANDO:"\"comando\"">
	|<R_PAQUETE:"\"paquete\"">
	|<R_INTRUCCION: "\"instruccion\"">
	|<R_USQL:"\"usql\"">
	|<R_REPORTE:"\"reporte\"">
	|<R_FIN:"\"fin\"">
	|<DOS_PUNTOS:":">
	|<COMA:",">
        |<COMILLAS:"\"">
	|<ENTERO : (["0"-"9"])+>
	|<INSTRUCCIONES:   ["a"-"z","A"-"Z","@"](~[])*["}",";"]>	
}

SKIP : 
{ 
	    " "
        |"\n" 
        | "\r\n"
        |"\r" 
        | "\t"
        | "\f"
}

SimpleNode Programa()          :
{/*@bgen(jjtree) PROGRAMA */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PROGRAMA */
        try {
/*@egen*/
	<ABRIR>inicio()<CERRAR><EOF>/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void inicio():
{/*@bgen(jjtree) inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) inicio */
        try {
/*@egen*/
	login()
	|paquete()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void login():
{/*@bgen(jjtree) login */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) login */
        try {
/*@egen*/
	validar() <COMA> login_S()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void validar():
{/*@bgen(jjtree) validar */
  SimpleNode jjtn000 = new SimpleNode(JJTVALIDAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) validar */
        try {
/*@egen*/
	<R_VALIDAR><DOS_PUNTOS>r_entero()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void login_S():
{/*@bgen(jjtree) login_S */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGIN_S);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) login_S */
        try {
/*@egen*/
	<R_LOGIN><DOS_PUNTOS><ABRIR><R_COMANDO><DOS_PUNTOS><COMILLAS>r_intrucciones()<COMILLAS><CERRAR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_entero()       :
{/*@bgen(jjtree) ENTERO */
        SimpleNode jjtn000 = new SimpleNode(JJTENTERO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) ENTERO */
        try {
/*@egen*/
	t=<ENTERO>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_intrucciones()              :
{/*@bgen(jjtree) INSTRUCCIONES */
        SimpleNode jjtn000 = new SimpleNode(JJTINSTRUCCIONES);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) INSTRUCCIONES */
        try {
/*@egen*/
	t=<INSTRUCCIONES>/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void paquete():
{/*@bgen(jjtree) paquete */
  SimpleNode jjtn000 = new SimpleNode(JJTPAQUETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) paquete */
        try {
/*@egen*/
	<R_PAQUETE><DOS_PUNTOS> tipo_paquete()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void tipo_paquete():
{/*@bgen(jjtree) tipo_paquete */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_PAQUETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipo_paquete */
        try {
/*@egen*/
	fin()
	|p_usql()
	|p_reporte()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void p_usql():
{/*@bgen(jjtree) p_usql */
  SimpleNode jjtn000 = new SimpleNode(JJTP_USQL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) p_usql */
        try {
/*@egen*/
	<R_USQL><COMA><R_INTRUCCION><DOS_PUNTOS><COMILLAS>r_intrucciones()<COMILLAS><COMA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void p_reporte():
{/*@bgen(jjtree) p_reporte */
  SimpleNode jjtn000 = new SimpleNode(JJTP_REPORTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) p_reporte */
        try {
/*@egen*/
	<R_REPORTE><COMA><R_INTRUCCION><DOS_PUNTOS><COMILLAS>r_intrucciones()<COMILLAS><COMA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void fin():
{/*@bgen(jjtree) fin */
  SimpleNode jjtn000 = new SimpleNode(JJTFIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) fin */
        try {
/*@egen*/
	r_fin()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_fin()    :
{/*@bgen(jjtree) FIN */
        SimpleNode jjtn000 = new SimpleNode(JJTFIN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) FIN */
        try {
/*@egen*/
	t=<R_FIN>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}