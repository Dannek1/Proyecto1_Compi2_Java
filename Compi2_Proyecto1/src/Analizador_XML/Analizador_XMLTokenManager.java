/* Analizador_XMLTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. Analizador_XMLTokenManager.java */
package Analizador_XML;
import java.io.*;

/** Token Manager. */
@SuppressWarnings("unused")public class Analizador_XMLTokenManager implements Analizador_XMLConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x7f00000000000L) != 0L)
         {
            jjmatchedKind = 56;
            return 4;
         }
         return -1;
      case 1:
         if ((active0 & 0x7f00000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 1;
            }
            return 4;
         }
         return -1;
      case 2:
         if ((active0 & 0x7f00000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0x3900000000000L) != 0L)
            return 4;
         if ((active0 & 0x4600000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 56;
               jjmatchedPos = 3;
            }
            return 4;
         }
         return -1;
      case 4:
         if ((active0 & 0x6600000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 4;
            return 4;
         }
         return -1;
      case 5:
         if ((active0 & 0x400000000000L) != 0L)
            return 4;
         if ((active0 & 0x6200000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 5;
            return 4;
         }
         return -1;
      case 6:
         if ((active0 & 0x200000000000L) != 0L)
            return 4;
         if ((active0 & 0x6000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 6;
            return 4;
         }
         return -1;
      case 7:
         if ((active0 & 0x2000000000000L) != 0L)
            return 4;
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 7;
            return 4;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000000000000L) != 0L)
            return 4;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L);
      case 60:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x2400ffffffffffeL);
      case 61:
         return jjStopAtPos(0, 51);
      case 62:
         return jjStopAtPos(0, 53);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3400000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStopAtPos(1, 60);
         break;
      case 47:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xaaaaa9254a4L);
      case 63:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000010000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x140L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000aL);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00004280200L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x4041000800L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x50400000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400010000a000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x406000a14aL);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x4280290L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400050000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x20004L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x850008500400L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x8082001000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x40a1801000800L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x3200210004000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x200100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(3, 4);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x8080004084L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000810a420L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x220080002000aL);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000200000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x4280200L);
      case 76:
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 4);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xa0001800800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2042001000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x140L);
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x4430050000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x50000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(4, 5);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(4, 26);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(4, 36);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(4, 42);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000404000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x2001000800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x280344L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa5_0(active0, 0x8100400L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20040000000a000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x102051000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x90000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000008aL);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x2008820020000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L);
      case 47:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 62:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(5, 6);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(5, 24);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(5, 27);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(5, 28);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(5, 37);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(5, 38);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(5, 40);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(5, 43);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000a000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2001200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x50000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x200000100c80L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x200020000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x420400000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000004L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x28000aL);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000800000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000L);
      case 62:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(6, 7);
         else if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(6, 13);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(6, 25);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(6, 29);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(6, 39);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(6, 41);
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x400L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x20800L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x401000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000080000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x2d0000L);
      case 82:
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x90080000aL);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000100204L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa8_0(active0, 0x240000L);
      case 62:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(7, 9);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(7, 14);
         else if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(7, 15);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         else if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(7, 22);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(7, 30);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(7, 34);
         break;
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 4);
         return jjMoveStringLiteralDfa8_0(active0, 0x200000100800000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x400000012000aL);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000004L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x400L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 47:
         return jjMoveStringLiteralDfa9_0(active0, 0x8L);
      case 62:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(8, 1);
         else if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(8, 10);
         else if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(8, 17);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(8, 18);
         else if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(8, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(8, 21);
         else if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(8, 23);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(8, 31);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(8, 35);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x4L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000800L);
      case 83:
      case 115:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 50, 4);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x4L) != 0L)
            return jjStopAtPos(9, 2);
         else if ((active0 & 0x8L) != 0L)
            return jjStopAtPos(9, 3);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x800L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(10, 11);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(11, 12);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa13_0(active0, 0x200000200000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000000L);
      case 62:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(13, 32);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000000000L);
      case 62:
         if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(14, 33);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 49:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 46:
         return jjMoveStringLiteralDfa17_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 48:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0, 0L);
      return 20;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa21_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0, 0L);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0, 0L);
      return 21;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0, 0L);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0, 0L);
      return 22;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa23_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(21, active0, 0L);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0, 0L);
      return 23;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0, 0L);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0, 0L);
      return 24;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa25_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0, 0L);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0, 0L);
      return 25;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0, 0L);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0, 0L);
      return 26;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa27_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0, 0L);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0, 0L);
      return 27;
   }
   switch(curChar)
   {
      case 71:
      case 103:
         return jjMoveStringLiteralDfa28_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0, 0L);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0, 0L);
      return 28;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa29_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0, 0L);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0, 0L);
      return 29;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa30_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(28, active0, 0L);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0, 0L);
      return 30;
   }
   switch(curChar)
   {
      case 85:
      case 117:
         return jjMoveStringLiteralDfa31_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0, 0L);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0, 0L);
      return 31;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa32_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0, 0L);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0, 0L);
      return 32;
   }
   switch(curChar)
   {
      case 70:
      case 102:
         return jjMoveStringLiteralDfa33_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(31, active0, 0L);
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0, 0L);
      return 33;
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa34_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0, 0L);
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0, 0L);
      return 34;
   }
   switch(curChar)
   {
      case 56:
         return jjMoveStringLiteralDfa35_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0, 0L);
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0, 0L);
      return 35;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa36_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0, 0L);
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0, 0L);
      return 36;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa37_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0, 0L);
}
private int jjMoveStringLiteralDfa37_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0, 0L);
      return 37;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         return jjMoveStringLiteralDfa38_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0, 0L);
}
private int jjMoveStringLiteralDfa38_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0, 0L);
      return 38;
   }
   switch(curChar)
   {
      case 84:
      case 116:
         return jjMoveStringLiteralDfa39_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0, 0L);
}
private int jjMoveStringLiteralDfa39_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0, 0L);
      return 39;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa40_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0, 0L);
}
private int jjMoveStringLiteralDfa40_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0, 0L);
      return 40;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa41_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0, 0L);
}
private int jjMoveStringLiteralDfa41_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0, 0L);
      return 41;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa42_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0, 0L);
}
private int jjMoveStringLiteralDfa42_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0, 0L);
      return 42;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa43_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(41, active0, 0L);
}
private int jjMoveStringLiteralDfa43_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(41, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, active0, 0L);
      return 43;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa44_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(42, active0, 0L);
}
private int jjMoveStringLiteralDfa44_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(42, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, active0, 0L);
      return 44;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa45_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(43, active0, 0L);
}
private int jjMoveStringLiteralDfa45_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(43, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(44, active0, 0L);
      return 45;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa46_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(44, active0, 0L);
}
private int jjMoveStringLiteralDfa46_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(44, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(45, active0, 0L);
      return 46;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa47_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(45, active0, 0L);
}
private int jjMoveStringLiteralDfa47_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(45, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(46, active0, 0L);
      return 47;
   }
   switch(curChar)
   {
      case 61:
         return jjMoveStringLiteralDfa48_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(46, active0, 0L);
}
private int jjMoveStringLiteralDfa48_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(46, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(47, active0, 0L);
      return 48;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa49_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(47, active0, 0L);
}
private int jjMoveStringLiteralDfa49_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(47, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(48, active0, 0L);
      return 49;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         return jjMoveStringLiteralDfa50_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(48, active0, 0L);
}
private int jjMoveStringLiteralDfa50_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(48, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(49, active0, 0L);
      return 50;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         return jjMoveStringLiteralDfa51_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(49, active0, 0L);
}
private int jjMoveStringLiteralDfa51_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(49, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(50, active0, 0L);
      return 51;
   }
   switch(curChar)
   {
      case 34:
         return jjMoveStringLiteralDfa52_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(50, active0, 0L);
}
private int jjMoveStringLiteralDfa52_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(50, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(51, active0, 0L);
      return 52;
   }
   switch(curChar)
   {
      case 63:
         return jjMoveStringLiteralDfa53_0(active0, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(51, active0, 0L);
}
private int jjMoveStringLiteralDfa53_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(51, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(52, active0, 0L);
      return 53;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(53, 57);
         break;
      default :
         break;
   }
   return jjStartNfa_0(52, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 5;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 34)
                     { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 34 && kind > 55)
                     kind = 55;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07ffffffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(4); }
                  break;
               case 1:
                  { jjAddStates(0, 1); }
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(4); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(0, 1); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, "\75", "\74", "\76", 
"\74\57", null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100001600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

    /** Constructor. */
    public Analizador_XMLTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public Analizador_XMLTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 5; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x3ffffffffffffffL, 0x0L, 
};
static final long[] jjtoSkip = {
   0xfc00000000000000L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[5];
    private final int[] jjstateSet = new int[2 * 5];

    
    protected char curChar;
}
