/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Gramatica.jj */
/*@egen*/options
{
 CHOICE_AMBIGUITY_CHECK=4;
 STATIC=false;
 FORCE_LA_CHECK=false;
 IGNORE_CASE=true;

}
PARSER_BEGIN(Analizador_XML)

package Analizador_XML;


import java.io.*;


public class Analizador_XML/*@bgen(jjtree)*/implements Analizador_XMLTreeConstants/*@egen*/ 
{/*@bgen(jjtree)*/
  protected JJTAnalizador_XMLState jjtree = new JJTAnalizador_XMLState();

/*@egen*/


}
PARSER_END(Analizador_XML)

TOKEN:
{
	//Etiquetas
	 <MAESTRO : "<Maestro>">
	|<C_MAESTRO:"</Maestro>"> 
	|<V_MAESTRO:"<Maestro/>">
	|<DB : "<DB>" >
	|<C_DB:"</DB>">
	|<BASE:"<Base>">
	|<C_BASE: "</Base>">
	|<V_BASE:"<Base/>">
	|<OBJECT:"<Object>" >
	|<C_OBJECT: "</Object>">
	|<PROCEDURE:"<Procedure>">
	|<C_PROCEDURE: "</Procedure>">
	|<TABLA : "<Tabla>" >
	|<C_TABLA:"</Tabla>"> 	
	|<V_TABLA:"<Tabla/>">
	|<METODO : "<Metodo>" >
	|<C_METODO:"</Metodo>">
	|<V_METODO:"<Metodo/>">
	|<OBJETO : "<Objeto>" >
	|<C_OBJETO:"</Objeto>">
	|<V_OBJETO:"<Objeto/>">
	|<NOMBRE : "<nombre>" >
	|<C_NOMBRE:"</nombre>">
	|<PROC : "<Proc>" >
	|<C_PROC:"</Proc>">
	|<OBJ : "<Obj>" >
	|<C_OBJ:"</Obj>">
	|<ATTR : "<attr>" >
	|<C_ATTR:"</attr>">
	|<PARAMS : "<params>" >
	|<C_PARAMS:"</params>">
	|<TIPO_RETURN : "<tipo_retorno>" >
	|<C_TIPO_RETURN:"</tipo_retorno>">
	|<RETURN : "<return>" >
	|<C_RETURN:"</return>">
	|<SRC : "<src>" >
	|<C_SRC:"</src>">
	|<PATH : "<path>" >
	|<C_PATH:"</path>"> 
	|<ROWS : "<rows>" >
	|<C_ROWS:"</rows>"> 
	|<ROW : "<Row>" >
	|<C_ROW:"</Row>">
	|<R_TEXT: "TEXT">
	|<R_INTEGER:"INTEGER">
	|<R_DOUBLE:"DOUBLE">
	|<R_BOOL:"BOOL">
	|<R_DATE:"DATE">
	|<R_DATETIME:"DATETIME">
	|<R_ATRIBUTOS:"Atributos">
	|<IGUAL:"="> 
	|<INICIO :"<">
	|<CIERRE :">">
	|<FIN:"</">		
	|<Atributo:  "\""(~["\""])+"\"">
	|<ID : ["a"-"z","A"-"Z","@"](["a"-"z","A"-"Z","0"-"9","_"])*>
	|<Propiedasdes: "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>">

	
}
SKIP : 
{ 
	    " "
        |"\n" 
        | "\r\n"
        |"\r" 
        | "\t"
        | "\f"
}

SimpleNode Programa()          :
{/*@bgen(jjtree) PROGRAMA */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PROGRAMA */
        try {
/*@egen*/
	<Propiedasdes>inicio()<EOF>/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/{return jjtn000;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void inicio():
{/*@bgen(jjtree) inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) inicio */
        try {
/*@egen*/
	<MAESTRO>maestro()<C_MAESTRO>
	|<BASE>base()<C_BASE>
	|<TABLA>tabla()<C_TABLA>
	|<METODO>(metodos())+<C_METODO>
	|<OBJETO>(objetos())+<C_OBJETO>
	|<V_MAESTRO>
	|<V_BASE>
	|<V_TABLA>
	|<V_METODO>
	|<V_OBJETO>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void maestro():
{/*@bgen(jjtree) maestro */
  SimpleNode jjtn000 = new SimpleNode(JJTMAESTRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) maestro */
        try {
/*@egen*/
	(<DB>db()<C_DB>)+/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void db():
{/*@bgen(jjtree) db */
  SimpleNode jjtn000 = new SimpleNode(JJTDB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) db */
        try {
/*@egen*/
	nombre() ruta()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void base():
{/*@bgen(jjtree) base */
  SimpleNode jjtn000 = new SimpleNode(JJTBASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) base */
        try {
/*@egen*/
	procB()obB()(tabB())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void tabB():
{/*@bgen(jjtree) tabB */
  SimpleNode jjtn000 = new SimpleNode(JJTTABB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tabB */
        try {
/*@egen*/
	<TABLA> nombre() ruta()<ROWS>(rows())+<C_ROWS><C_TABLA>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void procB():
{/*@bgen(jjtree) procB */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) procB */
        try {
/*@egen*/
	<PROCEDURE>ruta()<C_PROCEDURE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void obB():
{/*@bgen(jjtree) obB */
  SimpleNode jjtn000 = new SimpleNode(JJTOBB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) obB */
        try {
/*@egen*/
	<OBJECT>ruta()<C_OBJECT>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void rows():
{/*@bgen(jjtree) rows */
  SimpleNode jjtn000 = new SimpleNode(JJTROWS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) rows */
        try {
/*@egen*/
	<INICIO>tipo_dato()(atributos())?<CIERRE>r_atributo()<FIN>tipo_dato()<CIERRE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  
}

void metodos():
{/*@bgen(jjtree) metodos */
  SimpleNode jjtn000 = new SimpleNode(JJTMETODOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) metodos */
        try {
/*@egen*/
	<PROC>nombre()(params())? (tipoR())?intrucciones() (retorno())?<C_PROC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void tipoR():
{/*@bgen(jjtree) tipoR */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tipoR */
        try {
/*@egen*/
	<TIPO_RETURN>tipo_dato()<C_TIPO_RETURN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void params():
{/*@bgen(jjtree) params */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) params */
        try {
/*@egen*/
	<PARAMS>(rows())+<C_PARAMS>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}			

void intrucciones():
{/*@bgen(jjtree) intrucciones */
  SimpleNode jjtn000 = new SimpleNode(JJTINTRUCCIONES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) intrucciones */
        try {
/*@egen*/
	<SRC>(r_atributo())+<C_SRC>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void retorno():
{/*@bgen(jjtree) retorno */
  SimpleNode jjtn000 = new SimpleNode(JJTRETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) retorno */
        try {
/*@egen*/
	<RETURN>r_atributo()<C_RETURN>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void objetos():
{/*@bgen(jjtree) objetos */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJETOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) objetos */
        try {
/*@egen*/
	<OBJ> nombre() (attribs())? <C_OBJ>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void attribs():
{/*@bgen(jjtree) attribs */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) attribs */
        try {
/*@egen*/
	<ATTR>rows()<C_ATTR>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void tipo_dato()          :
{/*@bgen(jjtree) TIPO_DATO */
        SimpleNode jjtn000 = new SimpleNode(JJTTIPO_DATO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) TIPO_DATO */
         try {
/*@egen*/
	 t=<R_TEXT>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_INTEGER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_DOUBLE>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_BOOL>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_DATE>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/{jjtn000.setName(t.image);}
	|t=<R_DATETIME>/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                       }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
         }
/*@egen*/
	
}

void atributos():
{/*@bgen(jjtree) atributos */
  SimpleNode jjtn000 = new SimpleNode(JJTATRIBUTOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) atributos */
        try {
/*@egen*/
	<R_ATRIBUTOS> <IGUAL> r_atributo()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void nombre():
{/*@bgen(jjtree) nombre */
  SimpleNode jjtn000 = new SimpleNode(JJTNOMBRE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) nombre */
        try {
/*@egen*/
	<NOMBRE>r_atributo()<C_NOMBRE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/

}

void ruta():
{/*@bgen(jjtree) ruta */
  SimpleNode jjtn000 = new SimpleNode(JJTRUTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ruta */
        try {
/*@egen*/
	<PATH>r_atributo()<C_PATH>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


void tabla():
{/*@bgen(jjtree) tabla */
  SimpleNode jjtn000 = new SimpleNode(JJTTABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) tabla */
        try {
/*@egen*/
	<ROW>(row())+<C_ROW>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void row():
{/*@bgen(jjtree) row */
  SimpleNode jjtn000 = new SimpleNode(JJTROW);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) row */
        try {
/*@egen*/
	<INICIO><ID><CIERRE>r_atributo()<FIN><ID><CIERRE>
	|<NOMBRE>r_atributo()<C_NOMBRE>/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void r_atributo()         :
{/*@bgen(jjtree) ATRIBUTO */
        SimpleNode jjtn000 = new SimpleNode(JJTATRIBUTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Token t;
}
{/*@bgen(jjtree) ATRIBUTO */
        try {
/*@egen*/
	t=<Atributo>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}