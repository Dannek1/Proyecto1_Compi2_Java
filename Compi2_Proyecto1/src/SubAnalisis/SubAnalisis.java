/* SubAnalisis.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. SubAnalisis.java */
package SubAnalisis;


import java.io.*;


public class SubAnalisis/*@bgen(jjtree)*/implements SubAnalisisTreeConstants, SubAnalisisConstants {/*@bgen(jjtree)*/
  protected JJTSubAnalisisState jjtree = new JJTSubAnalisisState();

  final public SimpleNode Programa() throws ParseException {/*@bgen(jjtree) PROGRAMA */
  SimpleNode jjtn000 = new SimpleNode(JJTPROGRAMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      inicio();
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
    throw new Error("Missing return statement in function");
  }

  final public void inicio() throws ParseException {/*@bgen(jjtree) inicio */
  SimpleNode jjtn000 = new SimpleNode(JJTINICIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SubSentencias();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void sentencia() throws ParseException {/*@bgen(jjtree) sentencia */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_USAR:{
        Usar();
        break;
        }
      case R_CREAR:{
        crear();
        break;
        }
      case R_IMPRIMIR:{
        Imprimir();
        break;
        }
      case R_INSERTAR:{
        Insertar();
        break;
        }
      case R_ACTUALIZAR:{
        Actualizar();
        break;
        }
      case R_BORRAR:{
        Borrar();
        break;
        }
      case R_SELECCIONAR:{
        Seleccionar();
        break;
        }
      case R_OTORGAR:{
        Otorgar();
        break;
        }
      case R_DENEGAR:{
        Denegar();
        break;
        }
      case R_BACKUP:{
        back();
        break;
        }
      case R_RESTAURAR:{
        restaurar();
        break;
        }
      case R_ALTERAR:{
        Alterar();
        break;
        }
      case R_ELIMINAR:{
        Eliminar();
        break;
        }
      case R_DECLARAR:{
        Declarar();
        break;
        }
      case R_CONTAR:{
        Contar();
        break;
        }
      case ID:{
        Procedimiento();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Usar() throws ParseException {/*@bgen(jjtree) Usar */
  SimpleNode jjtn000 = new SimpleNode(JJTUSAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      r_usar();
      r_id();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_usar() throws ParseException {/*@bgen(jjtree) USAR */
        SimpleNode jjtn000 = new SimpleNode(JJTUSAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_USAR);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_id() throws ParseException {/*@bgen(jjtree) ID */
        SimpleNode jjtn000 = new SimpleNode(JJTID);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ID);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_punto_coma() throws ParseException {/*@bgen(jjtree) PUNTO_COMA */
        SimpleNode jjtn000 = new SimpleNode(JJTPUNTO_COMA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PUNTO_COMA);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void crear() throws ParseException {/*@bgen(jjtree) crear */
  SimpleNode jjtn000 = new SimpleNode(JJTCREAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      r_crear();
      Opciones_Crear();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_crear() throws ParseException {/*@bgen(jjtree) CREAR */
        SimpleNode jjtn000 = new SimpleNode(JJTCREAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_CREAR);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Opciones_Crear() throws ParseException {/*@bgen(jjtree) Opciones_Crear */
  SimpleNode jjtn000 = new SimpleNode(JJTOPCIONES_CREAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_BASE:{
        C_Base();
        break;
        }
      case R_TABLA:{
        C_Tabla();
        break;
        }
      case R_OBJETO:{
        C_Objeto();
        break;
        }
      case R_PROCEDIMIENTO:{
        C_Pro();
        break;
        }
      case R_FUNCION:{
        C_Funcion();
        break;
        }
      case R_USUARIO:{
        C_Usuario();
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void C_Base() throws ParseException {/*@bgen(jjtree) C_Base */
  SimpleNode jjtn000 = new SimpleNode(JJTC_BASE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_BASE);
      r_id();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void C_Tabla() throws ParseException {/*@bgen(jjtree) C_Tabla */
  SimpleNode jjtn000 = new SimpleNode(JJTC_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_TABLA);
      r_id();
      jj_consume_token(PAR_IZ);
      Campos_Tabla();
      jj_consume_token(PAR_DER);
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Campos_Tabla() throws ParseException {/*@bgen(jjtree) Campos_Tabla */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPOS_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Campo_Tabla();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        Campos_Tabla_prima();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Campos_Tabla_prima() throws ParseException {/*@bgen(jjtree) Campos_Tabla_prima */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPOS_TABLA_PRIMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COMA);
      Campo_Tabla();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Campo_Tabla() throws ParseException {/*@bgen(jjtree) Campo_Tabla */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPO_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Tipo_Dato();
      r_id();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case R_NO:
        case R_NULO:
        case R_AUTOINCREMENTABLE:
        case R_PK:
        case R_FK:
        case R_UNICO:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        Complemento();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Complemento() throws ParseException {/*@bgen(jjtree) COMPLEMENTO */
        SimpleNode jjtn000 = new SimpleNode(JJTCOMPLEMENTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_NO:{
        t = jj_consume_token(R_NO);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case R_NULO:{
        t = jj_consume_token(R_NULO);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case R_AUTOINCREMENTABLE:{
        t = jj_consume_token(R_AUTOINCREMENTABLE);
jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case R_PK:{
        t = jj_consume_token(R_PK);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case R_FK:{
        t = jj_consume_token(R_FK);
        r_id();
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image+" "+((SimpleNode) jjtn000.children[0]).name);
        break;
        }
      case R_UNICO:{
        t = jj_consume_token(R_UNICO);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void C_Objeto() throws ParseException {/*@bgen(jjtree) C_Objeto */
  SimpleNode jjtn000 = new SimpleNode(JJTC_OBJETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_OBJETO);
      r_id();
      jj_consume_token(PAR_IZ);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case R_TEXT:
        case R_INTEGER:
        case R_DOUBLE:
        case R_BOOL:
        case R_DATE:
        case R_DATETIME:{
          ;
          break;
          }
        default:
          jj_la1[5] = jj_gen;
          break label_3;
        }
        Parametros();
      }
      jj_consume_token(PAR_DER);
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Parametros() throws ParseException {/*@bgen(jjtree) Parametros */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETROS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Parametro();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMA:{
          ;
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          break label_4;
        }
        jj_consume_token(COMA);
        Parametro();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Parametro() throws ParseException {/*@bgen(jjtree) Parametro */
  SimpleNode jjtn000 = new SimpleNode(JJTPARAMETRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Tipo_Dato();
      r_id();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void C_Pro() throws ParseException {/*@bgen(jjtree) C_Pro */
  SimpleNode jjtn000 = new SimpleNode(JJTC_PRO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_PROCEDIMIENTO);
      r_id();
      jj_consume_token(PAR_IZ);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case R_TEXT:
        case R_INTEGER:
        case R_DOUBLE:
        case R_BOOL:
        case R_DATE:
        case R_DATETIME:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_5;
        }
        Parametros();
      }
      jj_consume_token(PAR_DER);
      jj_consume_token(COR_IZ);
      SubSentencias();
      jj_consume_token(COR_Der);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SubSentencia() throws ParseException {/*@bgen(jjtree) SubSentencia */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBSENTENCIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_1(3)) {
        Asignacion();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case R_SI:{
          IF();
          break;
          }
        case R_SELECCIONA:{
          Switch();
          break;
          }
        case R_PARA:{
          For();
          break;
          }
        case R_MIENTRAS:{
          While();
          break;
          }
        default:
          jj_la1[8] = jj_gen;
          if (jj_2_2(3)) {
            Fecha();
          } else if (jj_2_3(2)) {
            Fecha_Hora();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case R_USAR:
            case R_CREAR:
            case R_IMPRIMIR:
            case R_INSERTAR:
            case R_ACTUALIZAR:
            case R_BORRAR:
            case R_SELECCIONAR:
            case R_OTORGAR:
            case R_DENEGAR:
            case R_BACKUP:
            case R_RESTAURAR:
            case R_ALTERAR:
            case R_ELIMINAR:
            case R_DECLARAR:
            case R_CONTAR:
            case ID:{
              sentencia();
              break;
              }
            default:
              jj_la1[9] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void C_Funcion() throws ParseException {/*@bgen(jjtree) C_Funcion */
  SimpleNode jjtn000 = new SimpleNode(JJTC_FUNCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_FUNCION);
      r_id();
      jj_consume_token(PAR_IZ);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case R_TEXT:
        case R_INTEGER:
        case R_DOUBLE:
        case R_BOOL:
        case R_DATE:
        case R_DATETIME:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
        Parametros();
      }
      jj_consume_token(PAR_DER);
      Tipo_Dato();
      jj_consume_token(COR_IZ);
      Sentencias_Retorno();
      jj_consume_token(COR_Der);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Sentencias_Retorno() throws ParseException {/*@bgen(jjtree) Sentencias_Retorno */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAS_RETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_7:
      while (true) {
        SubSentencia();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case R_USAR:
        case R_CREAR:
        case R_IMPRIMIR:
        case R_INSERTAR:
        case R_ACTUALIZAR:
        case R_BORRAR:
        case R_SELECCIONAR:
        case R_OTORGAR:
        case R_DENEGAR:
        case R_BACKUP:
        case R_RESTAURAR:
        case R_ALTERAR:
        case R_ELIMINAR:
        case R_DECLARAR:
        case R_SI:
        case R_SELECCIONA:
        case R_PARA:
        case R_MIENTRAS:
        case R_CONTAR:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_7;
        }
      }
      Retorno();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Retorno() throws ParseException {/*@bgen(jjtree) Retorno */
  SimpleNode jjtn000 = new SimpleNode(JJTRETORNO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_RETORNO);
      aritmetica();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void C_Usuario() throws ParseException {/*@bgen(jjtree) C_Usuario */
  SimpleNode jjtn000 = new SimpleNode(JJTC_USUARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_USUARIO);
      r_id();
      jj_consume_token(R_COLOCAR);
      jj_consume_token(R_PAS);
      jj_consume_token(I_ASIG);
      Expresion();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Imprimir() throws ParseException {/*@bgen(jjtree) Imprimir */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPRIMIR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_IMPRIMIR);
      jj_consume_token(PAR_IZ);
      Expresion();
      jj_consume_token(PAR_DER);
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Insertar() throws ParseException {/*@bgen(jjtree) Insertar */
  SimpleNode jjtn000 = new SimpleNode(JJTINSERTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_INSERTAR);
      jj_consume_token(R_EN);
      jj_consume_token(R_TABLA);
      r_id();
      jj_consume_token(PAR_IZ);
      tipo_insercion();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void tipo_insercion() throws ParseException {/*@bgen(jjtree) tipo_insercion */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_INSERCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(5)) {
        campos();
        jj_consume_token(PAR_DER);
        jj_consume_token(R_VALORES);
        jj_consume_token(PAR_IZ);
        Valor();
        jj_consume_token(PAR_DER);
        r_punto_coma();
      } else if (jj_2_5(5)) {
        Valor();
        jj_consume_token(PAR_DER);
        r_punto_coma();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void campos() throws ParseException {/*@bgen(jjtree) campos */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_6(2)) {
        campo();
        jj_consume_token(COMA);
        campos();
      } else if (jj_2_7(2)) {
        campo();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void campo() throws ParseException {/*@bgen(jjtree) campo */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        r_id();
        break;
        }
      case R_USUARIO:{
        r_usuario();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Valor() throws ParseException {/*@bgen(jjtree) Valor */
  SimpleNode jjtn000 = new SimpleNode(JJTVALOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      aritmetica();
      if (jj_2_8(2)) {
        jj_consume_token(COMA);
        Valor();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Actualizar() throws ParseException {/*@bgen(jjtree) Actualizar */
  SimpleNode jjtn000 = new SimpleNode(JJTACTUALIZAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_ACTUALIZAR);
      jj_consume_token(R_TABLA);
      r_id();
      jj_consume_token(PAR_IZ);
      campos();
      jj_consume_token(PAR_DER);
      jj_consume_token(R_VALORES);
      jj_consume_token(PAR_IZ);
      Valor();
      jj_consume_token(PAR_DER);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_DONDE:{
        Condicionar();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Condicionar() throws ParseException {/*@bgen(jjtree) Condicionar */
  SimpleNode jjtn000 = new SimpleNode(JJTCONDICIONAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_DONDE);
      logica_Conusltas();
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Borrar() throws ParseException {/*@bgen(jjtree) Borrar */
  SimpleNode jjtn000 = new SimpleNode(JJTBORRAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_BORRAR);
      jj_consume_token(R_EN);
      jj_consume_token(R_TABLA);
      r_id();
      Condicionar();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Seleccionar() throws ParseException {/*@bgen(jjtree) Seleccionar */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECCIONAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_SELECCIONAR);
      Campos_Seleccion();
      jj_consume_token(R_DE);
      r_id();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_DONDE:{
        Condicionar();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_ORDENAR:{
        Ordenamiento();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Campos_Seleccion() throws ParseException {/*@bgen(jjtree) Campos_Seleccion */
  SimpleNode jjtn000 = new SimpleNode(JJTCAMPOS_SELECCION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI:{
        jj_consume_token(MULTI);
        break;
        }
      case R_USUARIO:
      case ID:{
        campos();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Ordenamiento() throws ParseException {/*@bgen(jjtree) Ordenamiento */
  SimpleNode jjtn000 = new SimpleNode(JJTORDENAMIENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_ORDENAR);
      r_id();
      Modo_Orden();
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Modo_Orden() throws ParseException {/*@bgen(jjtree) Modo_Orden */
  SimpleNode jjtn000 = new SimpleNode(JJTMODO_ORDEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_ASC:{
        r_asc();
        break;
        }
      case R_DESC:{
        r_desc();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Otorgar() throws ParseException {/*@bgen(jjtree) Otorgar */
  SimpleNode jjtn000 = new SimpleNode(JJTOTORGAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_OTORGAR);
      jj_consume_token(R_PERMISOS);
      r_id();
      jj_consume_token(COMA);
      r_id();
      jj_consume_token(PUNTO);
      Objeto();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Objeto() throws ParseException {/*@bgen(jjtree) Objeto */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI:{
        jj_consume_token(MULTI);
        break;
        }
      case ID:{
        r_id();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Denegar() throws ParseException {/*@bgen(jjtree) Denegar */
  SimpleNode jjtn000 = new SimpleNode(JJTDENEGAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_DENEGAR);
      jj_consume_token(R_PERMISOS);
      r_id();
      jj_consume_token(COMA);
      r_id();
      jj_consume_token(PUNTO);
      Objeto();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void back() throws ParseException {/*@bgen(jjtree) back */
  SimpleNode jjtn000 = new SimpleNode(JJTBACK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_BACKUP);
      tipo_back();
      r_id();
      r_id();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void tipo_back() throws ParseException {/*@bgen(jjtree) tipo_back */
  SimpleNode jjtn000 = new SimpleNode(JJTTIPO_BACK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_USQLDUMP:{
        r_umsql();
        break;
        }
      case R_COMPLETO:{
        r_completo();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void restaurar() throws ParseException {/*@bgen(jjtree) restaurar */
  SimpleNode jjtn000 = new SimpleNode(JJTRESTAURAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_RESTAURAR);
      tipo_back();
      aritmetica();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Alterar() throws ParseException {/*@bgen(jjtree) Alterar */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_ALTERAR);
      alterado();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void alterado() throws ParseException {/*@bgen(jjtree) alterado */
  SimpleNode jjtn000 = new SimpleNode(JJTALTERADO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_TABLA:{
        r_tabla();
        r_id();
        accion_alterado_tabla();
        r_punto_coma();
        break;
        }
      case R_OBJETO:{
        r_objeto();
        r_id();
        accion_alterado_objeto();
        r_punto_coma();
        break;
        }
      case R_USUARIO:{
        r_usario();
        r_id();
        jj_consume_token(R_CAMBIAR);
        jj_consume_token(R_PAS);
        jj_consume_token(I_ASIG);
        Expresion();
        r_punto_coma();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void accion_alterado_tabla() throws ParseException {/*@bgen(jjtree) accion_alterado_tabla */
  SimpleNode jjtn000 = new SimpleNode(JJTACCION_ALTERADO_TABLA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_AGREGAR:{
        r_agregar();
        jj_consume_token(PAR_IZ);
        Campos_Tabla();
        jj_consume_token(PAR_DER);
        break;
        }
      case R_QUITAR:{
        r_quitar();
        campos();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void accion_alterado_objeto() throws ParseException {/*@bgen(jjtree) accion_alterado_objeto */
  SimpleNode jjtn000 = new SimpleNode(JJTACCION_ALTERADO_OBJETO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_AGREGAR:{
        r_agregar();
        jj_consume_token(PAR_IZ);
        Parametros();
        jj_consume_token(PAR_DER);
        break;
        }
      case R_QUITAR:{
        r_quitar();
        campos();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Eliminar() throws ParseException {/*@bgen(jjtree) Eliminar */
  SimpleNode jjtn000 = new SimpleNode(JJTELIMINAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_ELIMINAR);
      objetos_eliminar();
      r_id();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void objetos_eliminar() throws ParseException {/*@bgen(jjtree) objetos_eliminar */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJETOS_ELIMINAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_TABLA:{
        jj_consume_token(R_TABLA);
        break;
        }
      case R_BASE:{
        jj_consume_token(R_BASE);
        break;
        }
      case R_OBJETO:{
        jj_consume_token(R_OBJETO);
        break;
        }
      case R_USUARIO:{
        jj_consume_token(R_USUARIO);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Declarar() throws ParseException {/*@bgen(jjtree) Declarar */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_DECLARAR);
      lista_variables();
      Tipo_Dato();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case I_ASIG:{
        jj_consume_token(I_ASIG);
        asignacion_declaracion();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void lista_variables() throws ParseException {/*@bgen(jjtree) lista_variables */
  SimpleNode jjtn000 = new SimpleNode(JJTLISTA_VARIABLES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_9(2)) {
        variable();
        jj_consume_token(COMA);
        lista_variables();
      } else if (jj_2_10(2)) {
        variable();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void variable() throws ParseException {/*@bgen(jjtree) variable */
  SimpleNode jjtn000 = new SimpleNode(JJTVARIABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      r_id();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void asignacion_declaracion() throws ParseException {/*@bgen(jjtree) asignacion_declaracion */
  SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION_DECLARACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      aritmetica();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAR_IZ:{
        r_parI();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case RESTA:
        case PAR_IZ:
        case ID:
        case ENTERO:
        case DECIMAL:
        case CADENA:
        case FECHA:
        case FECHA_HORA:
        case BOOLEAN:{
          Valor();
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          ;
        }
        r_parD();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Asignacion() throws ParseException {/*@bgen(jjtree) Asignacion */
  SimpleNode jjtn000 = new SimpleNode(JJTASIGNACION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      r_id();
      jj_consume_token(I_ASIG);
      aritmetica();
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void IF() throws ParseException {/*@bgen(jjtree) IF */
  SimpleNode jjtn000 = new SimpleNode(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_SI);
      jj_consume_token(PAR_IZ);
      logica();
      jj_consume_token(PAR_DER);
      jj_consume_token(COR_IZ);
      SubSentencias();
      jj_consume_token(COR_Der);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_SINO:{
        sino_else();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void sino_else() throws ParseException {/*@bgen(jjtree) sino_else */
  SimpleNode jjtn000 = new SimpleNode(JJTSINO_ELSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_SINO);
      jj_consume_token(COR_IZ);
      SubSentencias();
      jj_consume_token(COR_Der);
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Switch() throws ParseException {/*@bgen(jjtree) Switch */
  SimpleNode jjtn000 = new SimpleNode(JJTSWITCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_SELECCIONA);
      jj_consume_token(PAR_IZ);
      aritmetica();
      jj_consume_token(PAR_DER);
      jj_consume_token(COR_IZ);
      casos();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_DEFECTO:{
        defecto();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      jj_consume_token(COR_Der);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void casos() throws ParseException {/*@bgen(jjtree) casos */
  SimpleNode jjtn000 = new SimpleNode(JJTCASOS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      caso();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_CASO:{
        casos();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
    }
  }

  final public void caso() throws ParseException {/*@bgen(jjtree) caso */
  SimpleNode jjtn000 = new SimpleNode(JJTCASO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_CASO);
      Expresion();
      jj_consume_token(DOS_PUNTO);
      Sentencias_swithc();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Sentencias_swithc() throws ParseException {/*@bgen(jjtree) Sentencias_swithc */
  SimpleNode jjtn000 = new SimpleNode(JJTSENTENCIAS_SWITHC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_USAR:
      case R_CREAR:
      case R_IMPRIMIR:
      case R_INSERTAR:
      case R_ACTUALIZAR:
      case R_BORRAR:
      case R_SELECCIONAR:
      case R_OTORGAR:
      case R_DENEGAR:
      case R_BACKUP:
      case R_RESTAURAR:
      case R_ALTERAR:
      case R_ELIMINAR:
      case R_DECLARAR:
      case R_SI:
      case R_SELECCIONA:
      case R_PARA:
      case R_MIENTRAS:
      case R_CONTAR:
      case ID:{
        SubSentencia();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case R_USAR:
        case R_CREAR:
        case R_IMPRIMIR:
        case R_INSERTAR:
        case R_ACTUALIZAR:
        case R_BORRAR:
        case R_SELECCIONAR:
        case R_OTORGAR:
        case R_DENEGAR:
        case R_BACKUP:
        case R_RESTAURAR:
        case R_ALTERAR:
        case R_ELIMINAR:
        case R_DECLARAR:
        case R_SI:
        case R_SELECCIONA:
        case R_PARA:
        case R_MIENTRAS:
        case R_DETENER:
        case R_CONTAR:
        case ID:{
          Sentencias_swithc();
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          ;
        }
        break;
        }
      case R_DETENER:{
        r_detener();
        r_punto_coma();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void defecto() throws ParseException {/*@bgen(jjtree) defecto */
  SimpleNode jjtn000 = new SimpleNode(JJTDEFECTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_DEFECTO);
      jj_consume_token(DOS_PUNTO);
      Sentencias_swithc();
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void For() throws ParseException {/*@bgen(jjtree) For */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_PARA);
      jj_consume_token(PAR_IZ);
      declaracion_for();
      r_punto_coma();
      logica();
      r_punto_coma();
      operador_for();
      jj_consume_token(PAR_DER);
      jj_consume_token(COR_IZ);
      Sentencias_swithc();
      jj_consume_token(COR_Der);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void declaracion_for() throws ParseException {/*@bgen(jjtree) declaracion_for */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARACION_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_DECLARAR);
      r_id();
      jj_consume_token(R_INTEGER);
      jj_consume_token(I_ASIG);
      aritmetica();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void operador_for() throws ParseException {/*@bgen(jjtree) operador_for */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR_FOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:{
        r_incr();
        break;
        }
      case DECR:{
        r_decr();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void While() throws ParseException {/*@bgen(jjtree) While */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_MIENTRAS);
      jj_consume_token(PAR_IZ);
      logica();
      jj_consume_token(PAR_DER);
      jj_consume_token(COR_IZ);
      Sentencias_swithc();
      jj_consume_token(COR_Der);
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Fecha() throws ParseException {/*@bgen(jjtree) Fecha */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      r_id();
      jj_consume_token(I_ASIG);
      jj_consume_token(R_FECHA);
      jj_consume_token(PAR_IZ);
      jj_consume_token(PAR_DER);
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Fecha_Hora() throws ParseException {/*@bgen(jjtree) Fecha_Hora */
  SimpleNode jjtn000 = new SimpleNode(JJTFECHA_HORA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      r_id();
      jj_consume_token(I_ASIG);
      jj_consume_token(R_FECHA_HORA);
      jj_consume_token(PAR_IZ);
      jj_consume_token(PAR_DER);
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Contar() throws ParseException {/*@bgen(jjtree) Contar */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(R_CONTAR);
      jj_consume_token(PAR_IZ);
      jj_consume_token(MENOR);
      jj_consume_token(MENOR);
      Seleccionar();
      jj_consume_token(MAYOR);
      jj_consume_token(MAYOR);
      jj_consume_token(PAR_DER);
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Tipo_Dato() throws ParseException {/*@bgen(jjtree) TIPO_DATO */
        SimpleNode jjtn000 = new SimpleNode(JJTTIPO_DATO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case R_TEXT:{
        t = jj_consume_token(R_TEXT);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case R_INTEGER:{
        t = jj_consume_token(R_INTEGER);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case R_DOUBLE:{
        t = jj_consume_token(R_DOUBLE);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case R_BOOL:{
        t = jj_consume_token(R_BOOL);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case R_DATE:{
        t = jj_consume_token(R_DATE);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      case R_DATETIME:{
        t = jj_consume_token(R_DATETIME);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

//operaciones logicas
  final public void logica() throws ParseException {/*@bgen(jjtree) logica */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      log_or();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void log_or() throws ParseException {/*@bgen(jjtree) log_or */
  SimpleNode jjtn000 = new SimpleNode(JJTLOG_OR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_11(5)) {
        log_and();
        r_or();
        log_and();
      } else if (jj_2_12(5)) {
        log_and();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void log_and() throws ParseException {/*@bgen(jjtree) log_and */
  SimpleNode jjtn000 = new SimpleNode(JJTLOG_AND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_13(5)) {
        relacional();
        r_and();
        logica();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:{
          r_not();
          logica();
          break;
          }
        default:
          jj_la1[34] = jj_gen;
          if (jj_2_14(5)) {
            relacional();
          } else {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case PAR_IZ:{
              r_par_iz();
              logica();
              r_par_der();
              break;
              }
            default:
              jj_la1[35] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

//operaicones relacionales
  final public void relacional() throws ParseException {/*@bgen(jjtree) relacional */
  SimpleNode jjtn000 = new SimpleNode(JJTRELACIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      sub_relacional();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IGUAL:
        case DISTINTO:
        case MENOR:
        case MAYOR:
        case MENOR_IGUAL:
        case MAYOR_IGUAL:{
          ;
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          break label_8;
        }
        relacional_prima();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void relacional_prima() throws ParseException {/*@bgen(jjtree) relacional_prima */
  SimpleNode jjtn000 = new SimpleNode(JJTRELACIONAL_PRIMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        r_igual();
        sub_relacional();
        label_9:
        while (true) {
          if (jj_2_15(2)) {
            ;
          } else {
            break label_9;
          }
          relacional_prima();
        }
        break;
        }
      case DISTINTO:{
        r_distinto();
        sub_relacional();
        label_10:
        while (true) {
          if (jj_2_16(2)) {
            ;
          } else {
            break label_10;
          }
          relacional_prima();
        }
        break;
        }
      case MENOR:{
        r_menor();
        sub_relacional();
        label_11:
        while (true) {
          if (jj_2_17(2)) {
            ;
          } else {
            break label_11;
          }
          relacional_prima();
        }
        break;
        }
      case MAYOR:{
        r_mayor();
        sub_relacional();
        label_12:
        while (true) {
          if (jj_2_18(2)) {
            ;
          } else {
            break label_12;
          }
          relacional_prima();
        }
        break;
        }
      case MENOR_IGUAL:{
        r_menor_igual();
        sub_relacional();
        label_13:
        while (true) {
          if (jj_2_19(2)) {
            ;
          } else {
            break label_13;
          }
          relacional_prima();
        }
        break;
        }
      case MAYOR_IGUAL:{
        r_mayor_igual();
        sub_relacional();
        label_14:
        while (true) {
          if (jj_2_20(2)) {
            ;
          } else {
            break label_14;
          }
          relacional_prima();
        }
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void sub_relacional() throws ParseException {/*@bgen(jjtree) sub_relacional */
  SimpleNode jjtn000 = new SimpleNode(JJTSUB_RELACIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_21(5)) {
        aritmetica();
      } else if (jj_2_22(5)) {
        r_par_iz();
        relacional();
        r_par_der();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

//operaciones arimeticas
  final public void aritmetica() throws ParseException {/*@bgen(jjtree) aritmetica */
  SimpleNode jjtn000 = new SimpleNode(JJTARITMETICA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      multi_div();
      label_15:
      while (true) {
        if (jj_2_23(2)) {
          ;
        } else {
          break label_15;
        }
        aritmetica_prima();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void aritmetica_prima() throws ParseException {/*@bgen(jjtree) aritmetica_prima */
  SimpleNode jjtn000 = new SimpleNode(JJTARITMETICA_PRIMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:{
        r_suma();
        multi_div();
        label_16:
        while (true) {
          if (jj_2_24(2)) {
            ;
          } else {
            break label_16;
          }
          aritmetica_prima();
        }
        break;
        }
      case RESTA:{
        menos();
        multi_div();
        label_17:
        while (true) {
          if (jj_2_25(2)) {
            ;
          } else {
            break label_17;
          }
          aritmetica_prima();
        }
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
    }
  }

  final public void multi_div() throws ParseException {/*@bgen(jjtree) multi_div */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTI_DIV);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      potenciar();
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTI:
        case DIV:{
          ;
          break;
          }
        default:
          jj_la1[39] = jj_gen;
          break label_18;
        }
        multi_div_prima();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void multi_div_prima() throws ParseException {/*@bgen(jjtree) multi_div_prima */
  SimpleNode jjtn000 = new SimpleNode(JJTMULTI_DIV_PRIMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MULTI:{
        r_multi();
        potenciar();
        label_19:
        while (true) {
          if (jj_2_26(2)) {
            ;
          } else {
            break label_19;
          }
          multi_div_prima();
        }
        break;
        }
      case DIV:{
        r_div();
        potenciar();
        label_20:
        while (true) {
          if (jj_2_27(2)) {
            ;
          } else {
            break label_20;
          }
          multi_div_prima();
        }
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void potenciar() throws ParseException {/*@bgen(jjtree) potenciar */
  SimpleNode jjtn000 = new SimpleNode(JJTPOTENCIAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      unario();
      label_21:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case POW:{
          ;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          break label_21;
        }
        potenciar_prima();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void potenciar_prima() throws ParseException {/*@bgen(jjtree) potenciar_prima */
  SimpleNode jjtn000 = new SimpleNode(JJTPOTENCIAR_PRIMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      r_pow();
      unario();
      label_22:
      while (true) {
        if (jj_2_28(2)) {
          ;
        } else {
          break label_22;
        }
        potenciar_prima();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void unario() throws ParseException {/*@bgen(jjtree) unario */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESTA:{
        menos();
        Expresion();
        break;
        }
      case ID:
      case ENTERO:
      case DECIMAL:
      case CADENA:
      case FECHA:
      case FECHA_HORA:
      case BOOLEAN:{
        Expresion();
        break;
        }
      case PAR_IZ:{
        r_par_iz();
        aritmetica();
        r_par_der();
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void Expresion() throws ParseException {/*@bgen(jjtree) Expresion */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPRESION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        r_id();
        break;
        }
      case ENTERO:{
        r_entero();
        break;
        }
      case DECIMAL:{
        r_decimal();
        break;
        }
      case CADENA:{
        r_cadena();
        break;
        }
      case FECHA:{
        r_fecha();
        break;
        }
      case FECHA_HORA:{
        r_fecha_hora();
        break;
        }
      case BOOLEAN:{
        r_booleano();
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
           }
    }
  }

  final public void menos() throws ParseException {/*@bgen(jjtree) Menos */
        SimpleNode jjtn000 = new SimpleNode(JJTMENOS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(RESTA);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_entero() throws ParseException {/*@bgen(jjtree) Entero */
        SimpleNode jjtn000 = new SimpleNode(JJTENTERO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ENTERO);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_decimal() throws ParseException {/*@bgen(jjtree) DECIMAL */
        SimpleNode jjtn000 = new SimpleNode(JJTDECIMAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DECIMAL);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_cadena() throws ParseException {/*@bgen(jjtree) CADENA */
        SimpleNode jjtn000 = new SimpleNode(JJTCADENA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CADENA);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_fecha() throws ParseException {/*@bgen(jjtree) FECHA */
        SimpleNode jjtn000 = new SimpleNode(JJTFECHA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FECHA);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_fecha_hora() throws ParseException {/*@bgen(jjtree) FECHA_HORA */
        SimpleNode jjtn000 = new SimpleNode(JJTFECHA_HORA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(FECHA_HORA);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void Procedimiento() throws ParseException {/*@bgen(jjtree) Procedimiento */
  SimpleNode jjtn000 = new SimpleNode(JJTPROCEDIMIENTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      r_id();
      jj_consume_token(PAR_IZ);
      label_23:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case R_TEXT:
        case R_INTEGER:
        case R_DOUBLE:
        case R_BOOL:
        case R_DATE:
        case R_DATETIME:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_23;
        }
        Parametros();
      }
      jj_consume_token(PAR_DER);
      r_punto_coma();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void SubSentencias() throws ParseException {/*@bgen(jjtree) SubSentencias */
  SimpleNode jjtn000 = new SimpleNode(JJTSUBSENTENCIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_24:
      while (true) {
        SubSentencia();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case R_USAR:
        case R_CREAR:
        case R_IMPRIMIR:
        case R_INSERTAR:
        case R_ACTUALIZAR:
        case R_BORRAR:
        case R_SELECCIONAR:
        case R_OTORGAR:
        case R_DENEGAR:
        case R_BACKUP:
        case R_RESTAURAR:
        case R_ALTERAR:
        case R_ELIMINAR:
        case R_DECLARAR:
        case R_SI:
        case R_SELECCIONA:
        case R_PARA:
        case R_MIENTRAS:
        case R_CONTAR:
        case ID:{
          ;
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          break label_24;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_not() throws ParseException {/*@bgen(jjtree) NOT */
        SimpleNode jjtn000 = new SimpleNode(JJTNOT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NOT);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_and() throws ParseException {/*@bgen(jjtree) AND */
        SimpleNode jjtn000 = new SimpleNode(JJTAND);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(AND);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_or() throws ParseException {/*@bgen(jjtree) OR */
        SimpleNode jjtn000 = new SimpleNode(JJTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OR);
jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_par_iz() throws ParseException {/*@bgen(jjtree) PAR_IZ */
        SimpleNode jjtn000 = new SimpleNode(JJTPAR_IZ);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PAR_IZ);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_par_der() throws ParseException {/*@bgen(jjtree) PAR_DER */
        SimpleNode jjtn000 = new SimpleNode(JJTPAR_DER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PAR_DER);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_igual() throws ParseException {/*@bgen(jjtree) IGUAL */
        SimpleNode jjtn000 = new SimpleNode(JJTIGUAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IGUAL);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_distinto() throws ParseException {/*@bgen(jjtree) DISTINTO */
        SimpleNode jjtn000 = new SimpleNode(JJTDISTINTO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DISTINTO);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_menor() throws ParseException {/*@bgen(jjtree) MENOR */
        SimpleNode jjtn000 = new SimpleNode(JJTMENOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MENOR);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_mayor() throws ParseException {/*@bgen(jjtree) MAYOR */
        SimpleNode jjtn000 = new SimpleNode(JJTMAYOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MAYOR);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_menor_igual() throws ParseException {/*@bgen(jjtree) MENOR_IGUAL */
        SimpleNode jjtn000 = new SimpleNode(JJTMENOR_IGUAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MENOR_IGUAL);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_mayor_igual() throws ParseException {/*@bgen(jjtree) MAYOR_IGUAL */
        SimpleNode jjtn000 = new SimpleNode(JJTMAYOR_IGUAL);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MAYOR_IGUAL);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_suma() throws ParseException {/*@bgen(jjtree) SUMA */
        SimpleNode jjtn000 = new SimpleNode(JJTSUMA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(SUMA);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_multi() throws ParseException {/*@bgen(jjtree) MULTI */
        SimpleNode jjtn000 = new SimpleNode(JJTMULTI);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(MULTI);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_div() throws ParseException {/*@bgen(jjtree) DIV */
        SimpleNode jjtn000 = new SimpleNode(JJTDIV);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DIV);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_pow() throws ParseException {/*@bgen(jjtree) POW */
        SimpleNode jjtn000 = new SimpleNode(JJTPOW);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(POW);
jjtree.closeNodeScope(jjtn000, true);
                 jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_booleano() throws ParseException {/*@bgen(jjtree) BOOLEAN */
        SimpleNode jjtn000 = new SimpleNode(JJTBOOLEAN);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(BOOLEAN);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void logica_Conusltas() throws ParseException {/*@bgen(jjtree) logica_Conusltas */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICA_CONUSLTAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESTA:
      case PAR_IZ:
      case ID:
      case ENTERO:
      case DECIMAL:
      case CADENA:
      case FECHA:
      case FECHA_HORA:
      case BOOLEAN:{
        aritmetica();
        operador_consulta();
        aritmetica();
        label_25:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DISTINTO:
          case OR:
          case AND:{
            ;
            break;
            }
          default:
            jj_la1[46] = jj_gen;
            break label_25;
          }
          logica_Conusltas2();
        }
        break;
        }
      case R_USUARIO:{
        jj_consume_token(R_USUARIO);
        operador_consulta();
        aritmetica();
        label_26:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DISTINTO:
          case OR:
          case AND:{
            ;
            break;
            }
          default:
            jj_la1[47] = jj_gen;
            break label_26;
          }
          logica_Conusltas2();
        }
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  final public void operador_consulta() throws ParseException {/*@bgen(jjtree) operador_consulta */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR_CONSULTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        r_igual();
        break;
        }
      case MAYOR:{
        r_mayor();
        break;
        }
      case MENOR:{
        r_menor();
        break;
        }
      case MAYOR_IGUAL:{
        r_mayor_igual();
        break;
        }
      case MENOR_IGUAL:{
        r_menor_igual();
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void operador_consulta2() throws ParseException {/*@bgen(jjtree) operador_consulta2 */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERADOR_CONSULTA2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        r_and();
        break;
        }
      case OR:{
        r_or();
        break;
        }
      case DISTINTO:{
        r_distinto();
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void logica_Conusltas2() throws ParseException {/*@bgen(jjtree) logica_Conusltas2 */
  SimpleNode jjtn000 = new SimpleNode(JJTLOGICA_CONUSLTAS2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_29(2)) {
        operador_consulta2();
        aritmetica();
        operador_consulta();
        aritmetica();
      } else if (jj_2_30(2)) {
        operador_consulta2();
        jj_consume_token(R_PAS);
        operador_consulta();
        aritmetica();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void r_asc() throws ParseException {/*@bgen(jjtree) ASC */
        SimpleNode jjtn000 = new SimpleNode(JJTASC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_ASC);
jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_desc() throws ParseException {/*@bgen(jjtree) DESC */
        SimpleNode jjtn000 = new SimpleNode(JJTDESC);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_DESC);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_umsql() throws ParseException {/*@bgen(jjtree) USQLDUMP */
        SimpleNode jjtn000 = new SimpleNode(JJTUSQLDUMP);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_USQLDUMP);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_completo() throws ParseException {/*@bgen(jjtree) COMPLETO */
        SimpleNode jjtn000 = new SimpleNode(JJTCOMPLETO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_COMPLETO);
jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_tabla() throws ParseException {/*@bgen(jjtree) TABLA */
        SimpleNode jjtn000 = new SimpleNode(JJTTABLA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_TABLA);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_objeto() throws ParseException {/*@bgen(jjtree) OBJETO */
        SimpleNode jjtn000 = new SimpleNode(JJTOBJETO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_OBJETO);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_usario() throws ParseException {/*@bgen(jjtree) USUARIO */
        SimpleNode jjtn000 = new SimpleNode(JJTUSUARIO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_USUARIO);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_incr() throws ParseException {/*@bgen(jjtree) INCR */
        SimpleNode jjtn000 = new SimpleNode(JJTINCR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(INCR);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_decr() throws ParseException {/*@bgen(jjtree) DECR */
        SimpleNode jjtn000 = new SimpleNode(JJTDECR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(DECR);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_detener() throws ParseException {/*@bgen(jjtree) DETENER */
        SimpleNode jjtn000 = new SimpleNode(JJTDETENER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_DETENER);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_usuario() throws ParseException {/*@bgen(jjtree) USUARIO */
        SimpleNode jjtn000 = new SimpleNode(JJTUSUARIO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_USUARIO);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_base() throws ParseException {/*@bgen(jjtree) BASE_DATOS */
        SimpleNode jjtn000 = new SimpleNode(JJTBASE_DATOS);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_BASE);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_agregar() throws ParseException {/*@bgen(jjtree) AGREGAR */
        SimpleNode jjtn000 = new SimpleNode(JJTAGREGAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_AGREGAR);
jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_quitar() throws ParseException {/*@bgen(jjtree) QUITAR */
        SimpleNode jjtn000 = new SimpleNode(JJTQUITAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(R_QUITAR);
jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_parI() throws ParseException {/*@bgen(jjtree) PAR_IZ */
        SimpleNode jjtn000 = new SimpleNode(JJTPAR_IZ);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PAR_IZ);
jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void r_parD() throws ParseException {/*@bgen(jjtree) PAR_DER */
        SimpleNode jjtn000 = new SimpleNode(JJTPAR_DER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PAR_DER);
jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
jjtn000.setName(t.image);
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  void error_skipto(int kind) throws ParseException {/*@bgen(jjtree) error_skipto */
SimpleNode jjtn000 = new SimpleNode(JJTERROR_SKIPTO);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {ParseException e = generateParseException(); // se genera el objeto excepción
System.out.println(e.toString()); // se imprime el mensaje de error
Token t;
do {
t = getNextToken();
} while (t.kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(MAYOR)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_3R_42()) return true;
    if (jj_3R_37()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(MENOR)) return true;
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(R_USUARIO)) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_3R_79()) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_3R_78()) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_59()
 {
    if (jj_3R_77()) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_3R_76()) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_17()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_3R_75()) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(DISTINTO)) return true;
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_3R_74()) return true;
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_56()) {
    jj_scanpos = xsp;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) {
    jj_scanpos = xsp;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(IGUAL)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_3R_42()) return true;
    if (jj_3R_39()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_3R_73()) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    if (jj_scan_token(PAR_DER)) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_37()) return true;
    if (jj_3R_38()) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(PAR_IZ)) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_35()) return true;
    if (jj_3R_36()) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_48()) return true;
    if (jj_scan_token(I_ASIG)) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(FECHA_HORA)) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_48()) return true;
    if (jj_scan_token(I_ASIG)) return true;
    if (jj_scan_token(R_FECHA)) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_scan_token(FECHA)) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(CADENA)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_47()) return true;
    if (jj_scan_token(R_PAS)) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_47()) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(ENTERO)) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(RESTA)) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(PUNTO_COMA)) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_94()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_3R_41()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_42()) return true;
    if (jj_3R_41()) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    if (jj_scan_token(POW)) return true;
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    if (jj_3R_83()) return true;
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    if (jj_3R_67()) return true;
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_33()) return true;
    if (jj_scan_token(COMA)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(MULTI)) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_89()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_31()) return true;
    if (jj_scan_token(PAR_DER)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_30()) return true;
    if (jj_scan_token(PAR_DER)) return true;
    if (jj_scan_token(R_VALORES)) return true;
    if (jj_scan_token(PAR_IZ)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_3R_85()) return true;
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_27()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_3R_84()) return true;
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_26()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(SUMA)) return true;
    return false;
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_48()) return true;
    if (jj_scan_token(I_ASIG)) return true;
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_81()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    if (jj_scan_token(MAYOR_IGUAL)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_3R_83()) return true;
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_3R_82()) return true;
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    if (jj_scan_token(MENOR_IGUAL)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_34()) return true;
    if (jj_scan_token(COMA)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  /** Generated Token Manager. */
  public SubAnalisisTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[51];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6000000,0xf8000000,0x800000,0x0,0x0,0x0,0x800000,0x0,0x0,0x6000000,0x0,0x6000000,0x0,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x30000000,0x0,0x0,0x38000000,0x100,0x40004,0x40000,0x0,0x0,0x0,0x6000000,0x6000000,0xc0,0x0,0x20000,0x40000,0x7e00,0x7e00,0x6,0x18,0x18,0x20,0x40004,0x0,0x0,0x6000000,0x18400,0x18400,0x40004,0x7a00,0x18400,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x18cd0d30,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0xa0000000,0x18cd0d30,0x0,0xb8cd0d30,0x2,0x200,0x200,0x2000,0x2,0xc000,0x0,0x300000,0x2,0x3000000,0x3000000,0x2,0x0,0x0,0x0,0x40000000,0x0,0x0,0xb8cd0d30,0xb8cd0d30,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xb8cd0d30,0x0,0x0,0x2,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x200080,0x0,0x0,0xfc000,0xfc000,0x3f00,0x0,0x3f00,0xc,0x200080,0x3f00,0x20008c,0x200000,0x0,0x0,0x0,0x200000,0x0,0x200000,0x0,0x0,0x0,0x0,0x0,0x0,0x17e00000,0x0,0x0,0x2,0x1,0x20009c,0x20009c,0x0,0x3f00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17e00000,0x17e00000,0x3f00,0x20008c,0x0,0x0,0x17e00000,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[30];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SubAnalisis(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SubAnalisis(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SubAnalisisTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SubAnalisis(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SubAnalisisTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SubAnalisis(SubAnalisisTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SubAnalisisTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 51; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[101];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 51; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 101; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 30; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
