/* SubAnalisisTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. SubAnalisisTokenManager.java */
package SubAnalisis;
import java.io.*;

/** Token Manager. */
@SuppressWarnings("unused")public class SubAnalisisTokenManager implements SubAnalisisConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffff7f7e000000L) != 0L || (active1 & 0xfff9fL) != 0L)
         {
            jjmatchedKind = 85;
            return 1;
         }
         if ((active0 & 0x8000000000L) != 0L)
         {
            jjmatchedKind = 85;
            return 12;
         }
         if ((active0 & 0x80000000L) != 0L || (active1 & 0x60L) != 0L)
         {
            jjmatchedKind = 85;
            return 16;
         }
         if ((active1 & 0x100000L) != 0L)
            return 3;
         return -1;
      case 1:
         if ((active0 & 0x8ffb6fbffe000000L) != 0L || (active1 & 0xfbfedL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 1;
            }
            return 1;
         }
         if ((active0 & 0x7004904000000000L) != 0L || (active1 & 0x4012L) != 0L)
            return 1;
         return -1;
      case 2:
         if ((active0 & 0xdfffafbffe000000L) != 0L || (active1 & 0xfbfffL) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 2;
            return 1;
         }
         if ((active0 & 0x400000000000L) != 0L)
            return 1;
         return -1;
      case 3:
         if ((active0 & 0x9fff2fbffc000000L) != 0L || (active1 & 0xf06faL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 3;
            }
            return 1;
         }
         if ((active0 & 0x4000800002000000L) != 0L || (active1 & 0xb905L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x9fff2dbfe8000000L) != 0L || (active1 & 0x7269aL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0x20014000000L) != 0L || (active1 & 0x80060L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x9df729bfc8000000L) != 0L || (active1 & 0x7225aL) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x208040020000000L) != 0L || (active1 & 0x480L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x9872293848000000L) != 0L || (active1 & 0x72048L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x585008780000000L) != 0L || (active1 & 0x212L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x8040290048000000L) != 0L || (active1 & 0x70040L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x1832003800000000L) != 0L || (active1 & 0x2008L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0x40000000000000L) != 0L)
            return 1;
         if ((active0 & 0x8000290048000000L) != 0L || (active1 & 0x70040L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 8;
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x8000090008000000L) != 0L || (active1 & 0x40L) != 0L)
            return 1;
         if ((active0 & 0x200040000000L) != 0L || (active1 & 0x70000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 85;
               jjmatchedPos = 9;
            }
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x280000000000L) != 0L)
            return 1;
         if ((active0 & 0x40000000L) != 0L || (active1 & 0x70000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x40000000L) != 0L || (active1 & 0x70000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      case 12:
         if ((active1 & 0x30000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 12;
            return 1;
         }
         if ((active0 & 0x40000000L) != 0L || (active1 & 0x40000L) != 0L)
            return 1;
         return -1;
      case 13:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 13;
            return 1;
         }
         if ((active1 & 0x20000L) != 0L)
            return 1;
         return -1;
      case 14:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 85;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 33:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x400L, 0x0L);
      case 34:
         return jjStartNfaWithStates_0(0, 84, 3);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x10000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 18);
      case 41:
         return jjStopAtPos(0, 19);
      case 42:
         return jjStopAtPos(0, 3);
      case 43:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 44:
         return jjStopAtPos(0, 23);
      case 45:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x80L, 0x0L);
      case 46:
         return jjStopAtPos(0, 24);
      case 47:
         return jjStopAtPos(0, 4);
      case 58:
         return jjStopAtPos(0, 91);
      case 59:
         return jjStopAtPos(0, 22);
      case 60:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0x2000L, 0x0L);
      case 61:
         jjmatchedKind = 8;
         return jjMoveStringLiteralDfa1_0(0x200L, 0x0L);
      case 62:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 94:
         return jjStopAtPos(0, 5);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x180410000000000L, 0x10000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8040008000000L, 0x800L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x420000404000000L, 0x81L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x1004920000000000L, 0x3412L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x800004000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x60L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3000000000L, 0x200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x1200020000000L, 0x0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x2000840000000L, 0x4L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40000100000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0xe000080000000000L, 0x0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10000202000000L, 0x80000L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 20);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x8000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 21);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         break;
      case 38:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         break;
      case 43:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 45:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 61:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         else if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x408008818000000L, active1, 0x3005L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x9046880100000000L, active1, 0x172L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L, active1, 0L);
      case 73:
      case 105:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0x8L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x880000000000000L, active1, 0x60000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L, active1, 0x80200L);
      case 79:
      case 111:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 78, 1);
         return jjMoveStringLiteralDfa2_0(active0, 0x20060400000000L, active1, 0xc80L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200044000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x10400202000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000080000000L, active1, 0x18000L);
      case 124:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000L, active1, 0x60000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0x1008000000000000L, active1, 0x60L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L, active1, 0x8L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00000000000000L, active1, 0x80000L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000088400000000L, active1, 0x8000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x420000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4004020080000000L, active1, 0x80L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000040000000L, active1, 0x800L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x102040000000000L, active1, 0x4L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x40802808000000L, active1, 0x1L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80010100000000L, active1, 0x13210L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L, active1, 0x400L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x204000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0x400L);
      case 67:
      case 99:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0xc0000000L, active1, 0x80000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8184282028000000L, active1, 0x2212L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x60L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1010000010000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x802000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8L);
      case 79:
      case 111:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 1);
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 1);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 79, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x8500000000L, active1, 0x10000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1041000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x240000000000000L, active1, 0x80L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x60000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000L, active1, 0L);
      case 65:
      case 97:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(4, 28, 1);
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x1240050000000000L, active1, 0xc0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000080400000000L, active1, 0x2L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L, active1, 0x60000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x105000000000000L, active1, 0x200L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xc02001080000000L, active1, 0x10000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000000L, active1, 0x400L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L, active1, 0x10L);
      case 79:
      case 111:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 1);
         break;
      case 82:
      case 114:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000a300000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000L, active1, 0x2008L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x60040L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x585200400000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000080000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x48000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 74, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x20008000000000L, active1, 0x210L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L, active1, 0x2000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000100000000L, active1, 0x10000L);
      case 79:
      case 111:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 29, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x880000000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 1);
         break;
      case 82:
      case 114:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 1);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 71, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0x8L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L, active1, 0x2L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x50000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1800002008000000L, active1, 0x8L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000091040000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0x2000L);
      case 78:
      case 110:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 1);
         break;
      case 79:
      case 111:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(6, 32, 1);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 1);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(6, 65, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000L);
      case 82:
      case 114:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 1);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 1);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 1);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 1);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 58, 1);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(6, 68, 1);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(6, 73, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x40200800000000L, active1, 0L);
      case 83:
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(7, 35, 1);
         break;
      case 69:
      case 101:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 1);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 53, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000080000000000L, active1, 0x40040L);
      case 80:
      case 112:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 1);
         break;
      case 82:
      case 114:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 36, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 1);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 1);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 60, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x30000L);
      case 83:
      case 115:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 49, 1);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 67, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000L, active1, 0L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x10000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000000L, active1, 0x20000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000080000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 54, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40040L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(9, 70, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x80000000000L, active1, 0x40000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x40000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x30000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 1);
         break;
      case 83:
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(9, 27, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x20000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L, active1, 0x40000L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 43, 1);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 45, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x40000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x10000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x20000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x40000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(12, 82, 1);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x20000L);
      case 79:
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(12, 30, 1);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(13, 81, 1);
         return jjMoveStringLiteralDfa14_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1);
      return 14;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa15_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1);
      return 15;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1);
}
private int jjMoveStringLiteralDfa16_0(long old1, long active1){
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(14, 0L, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, 0L, active1);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(16, 80, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(15, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 60;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     { jjCheckNAddStates(0, 4); }
                  }
                  else if (curChar == 35)
                     { jjCheckNAddTwoStates(54, 55); }
                  else if (curChar == 34)
                     { jjCheckNAdd(3); }
                  if ((0xe000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  break;
               case 12:
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(1); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 34)
                     { jjCheckNAdd(3); }
                  break;
               case 3:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(3, 4); }
                  break;
               case 4:
                  if (curChar == 34 && kind > 88)
                     kind = 88;
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAddStates(0, 4); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  { jjCheckNAdd(19); }
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(20, 21); }
                  break;
               case 21:
                  if (curChar == 46)
                     { jjCheckNAdd(22); }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 87)
                     kind = 87;
                  { jjCheckNAdd(22); }
                  break;
               case 23:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 27:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L && kind > 89)
                     kind = 89;
                  break;
               case 31:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if (curChar == 32)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 40:
                  if ((0x7000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(40, 41); }
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 42:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 43:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 46:
                  if ((0x3f000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 47:
                  if ((0x3ff000000000000L & l) != 0L && kind > 90)
                     kind = 90;
                  break;
               case 48:
                  if ((0xe000000000000L & l) != 0L)
                     { jjCheckNAddStates(5, 8); }
                  break;
               case 49:
                  if ((0xe000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(49, 50); }
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(23); }
                  break;
               case 51:
                  if ((0xe000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(51, 52); }
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAdd(31); }
                  break;
               case 53:
                  if (curChar == 35)
                     { jjCheckNAddTwoStates(54, 55); }
                  break;
               case 54:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  { jjCheckNAdd(54); }
                  break;
               case 55:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x3ff000100000000L & l) != 0L)
                     { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 57:
                  if ((0xfff400100003600L & l) != 0L)
                     { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 58:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if (curChar == 35 && kind > 100)
                     kind = 100;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07ffffffL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     { jjCheckNAdd(1); }
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     { jjCheckNAdd(1); }
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 85)
                        kind = 85;
                     { jjCheckNAdd(1); }
                  }
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  { jjAddStates(9, 10); }
                  break;
               case 5:
                  if ((0x800000008000L & l) != 0L && kind > 92)
                     kind = 92;
                  break;
               case 6:
                  if ((0x4000000040000L & l) != 0L)
                     { jjCheckNAdd(5); }
                  break;
               case 7:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x8000000080000L & l) != 0L)
                     { jjCheckNAdd(5); }
                  break;
               case 15:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 54:
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjCheckNAddTwoStates(57, 58); }
                  break;
               case 57:
                  if ((0x7fffffe07ffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(57, 58); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(9, 10); }
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 54;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 60 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   19, 20, 21, 23, 31, 49, 50, 51, 52, 3, 4, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\53", "\55", "\52", "\57", "\136", "\53\53", "\55\55", "\75", "\75\75", 
"\41\75", "\74", "\76", "\74\75", "\76\75", "\174\174", "\46\46", "\41", "\50", "\51", 
"\173", "\175", "\73", "\54", "\56", null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, "\42", null, null, null, null, 
null, null, "\72", null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100001600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public SubAnalisisTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public SubAnalisisTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 60; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x1fffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0x1fe0000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[60];
    private final int[] jjstateSet = new int[2 * 60];

    
    protected char curChar;
}
